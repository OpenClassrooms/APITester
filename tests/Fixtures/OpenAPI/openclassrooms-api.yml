openapi: 3.0.2
info:
    title: 'OpenClassrooms API'
    version: '1.0'
paths:
    /analytics:
        post:
            tags:
                - Analytic
            summary: 'Post analytics'
            description: 'Post analytics'
            operationId: oc_api_analytic_post
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Analytic.AnalyticViewModel'
    '/availabilities/{availabilityId}':
        delete:
            tags:
                - Availability
                - Calendar
            summary: 'Delete availability'
            description: 'Delete availability'
            operationId: oc_api_availability_delete
            responses:
                204:
                    description: 'No content'

        parameters:
            -   name: availabilityId
                in: path
                description: 'Availability id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        patch:
            tags:
                - Calendar
                - Availability
            summary: 'Patch availability '
            description: 'Patch availability '
            operationId: oc_api_user_availabilities_patch
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Calendar.Availability.AvailabilityViewModelDetail'
    '/chapters/{chapterId}/complete':
        delete:
            tags:
                - LearningActivity
                - Course
                - Chapter
            summary: 'Delete chapter complete'
            description: 'Delete chapter complete'
            operationId: oc_api_learning_activity_course_chapter_complete_delete
            responses:
                204:
                    description: 'No content'

                404:
                    description: 'Not found'

        parameters:
            -   name: chapterId
                in: path
                description: 'Chapter id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1604192
        post:
            tags:
                - LearningActivity
                - Course
                - Chapter
            summary: 'Post chapter complete'
            description: 'Post chapter complete'
            operationId: oc_api_learning_activity_course_chapter_complete_post
            responses:
                201:
                    description: Created

                404:
                    description: 'Not found'

    /course-collections:
        get:
            tags:
                - LearningContent
                - CourseCollection
            summary: 'Get course-collections'
            description: 'Get course-collections'
            operationId: oc_api_learning_content_course_collection_course_collections_get
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.CourseCollection.CourseCollectionCollection'
        post:
            tags:
                - LearningContent
                - CourseCollection
            summary: 'Post course-collections'
            description: 'Post course-collections'
            operationId: oc_api_learning_content_course_collection_course_collection_post
            responses:
                201:
                    description: Created

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CourseCollection.PostCourseCollection'
    '/course-collections/{courseCollectionId}':
        get:
            tags:
                - LearningContent
                - CourseCollection
            summary: 'Get course-collection'
            description: 'Get course-collection'
            operationId: oc_api_learning_content_course_collection_course_collection_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.CourseCollection.CourseCollection'
        parameters:
            -   name: courseCollectionId
                in: path
                description: 'CourseCollection id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        put:
            tags:
                - LearningContent
                - CourseCollection
            summary: 'Put course-collection'
            description: 'Put course-collection'
            operationId: oc_api_learning_content_course_collection_course_collection_put
            responses:
                200:
                    description: Ok

                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/CourseCollection.PutCourseCollection'
    /courses:
        get:
            tags:
                - LearningContent
                - Course
            summary: 'Get courses'
            description: 'Get courses'
            operationId: oc_api_learning_content_courses_get
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.Course.CourseList'
    '/courses/{courseId}':
        get:
            tags:
                - LearningContent
                - Course
            summary: 'Get course'
            description: 'Get course'
            operationId: oc_api_learning_content_course_course_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.Course.CourseDetail'
        parameters:
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
        patch:
            tags:
                - LearningContent
                - Course
            summary: 'Patch course'
            description: 'Patch course'
            operationId: oc_api_learning_content_course_course_patch
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok

    '/courses/{courseId}/chapters/{chapterId}':
        get:
            tags:
                - LearningContent
                - Course
                - Chapter
            summary: 'Get course chapter'
            description: 'Get course chapter'
            operationId: oc_api_learning_content_course_chapter_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.Chapter.Chapter'
        parameters:
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
            -   name: chapterId
                in: path
                description: 'Chapter id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1604192
    '/courses/{courseId}/chapters/{chapterId}/content':
        get:
            tags:
                - LearningActivity
                - Course
                - Chapter
            summary: 'Get course chapter content'
            description: 'Get course chapter content'
            operationId: oc_api_learning_activity_course_chapter_content_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok

        parameters:
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
            -   name: chapterId
                in: path
                description: 'Chapter id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1604192
    '/courses/{courseId}/chapters/{chapterId}/resources':
        get:
            tags:
                - LearningActivity
                - Course
                - Chapter
            summary: 'Get course chapter resources'
            description: 'Get course chapter resources'
            operationId: oc_api_learning_activity_course_chapter_resources_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok

        parameters:
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
            -   name: chapterId
                in: path
                description: 'Chapter id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1604192
    '/courses/{courseId}/content':
        get:
            tags:
                - LearningActivity
                - Course
            summary: 'Get course content'
            description: 'Get course content'
            operationId: oc_api_learning_content_course_course_content_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok

        parameters:
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
    '/courses/{courseId}/introduction':
        get:
            tags:
                - LearningContent
                - Course
            summary: 'Get course introduction'
            description: 'Get course introduction'
            operationId: oc_api_learning_content_course_course_introduction_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok

        parameters:
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
    '/courses/{courseId}/introduction/resources':
        get:
            tags:
                - LearningContent
                - Course
            summary: 'Get course introduction resources'
            description: 'Get course introduction resources'
            operationId: oc_api_learning_content_course_course_introduction_resources_get
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LearningContent.Content.ContentResourceCollection'
        parameters:
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
    '/courses/{courseId}/recommended-paths':
        get:
            tags:
                - LearningContent
                - LearningPath
            summary: 'Get course recommended-paths'
            description: 'Get course recommended-paths'
            operationId: oc_api_recommended_learning_paths_for_course_get
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.LearningPath.LearningPathDetailCollection'
        parameters:
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
    '/courses/{courseId}/skills':
        get:
            tags:
                - LearningContent
                - Course
                - Skills
            summary: 'Get course skills'
            description: 'Get course skills'
            operationId: oc_api_learning_content_course_skills_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.Skill.SkillList'
        parameters:
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
    '/courses/{courseId}/table-of-content':
        get:
            tags:
                - LearningContent
                - Course
                - Toc
            summary: 'Get course table-of-content'
            description: 'Get course table-of-content'
            operationId: oc_api_learning_content_course_course_toc_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Exercise.Toc.CourseItemWithExercises'
        parameters:
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
    '/courses/{courseId}/teaser/resources':
        get:
            tags:
                - LearningContent
                - Course
            summary: 'Get course teaser resources'
            description: 'Get course teaser resources'
            operationId: oc_api_learning_content_course_course_teaser_resources_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LearningContent.Content.ContentResource'
        parameters:
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
    '/exercises/{exerciseId}':
        get:
            tags:
                - Course
                - Exercise
            summary: 'Get exercise'
            description: 'Get exercise'
            operationId: oc_api_course_exercise_exercise_get
            responses:
                200:
                    description: Ok

        parameters:
            -   name: exerciseId
                in: path
                description: 'Exercise id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/external-resources/{externalResourceId}':
        parameters:
            -   name: externalResourceId
                in: path
                description: 'External resource id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        patch:
            tags:
                - LearningContent
                - Content
            summary: 'Patch external-resource'
            description: 'Patch external-resource'
            operationId: oc_api_learning_content_external_resource_patch
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LearningContent.Content.ExternalResourceDetailViewModel'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LearningContent.Content.ExternalResource.PatchExternalResourceModel'
    /funding-mechanisms:
        get:
            tags:
                - FinancialAid
                - FundingMechanism
            summary: 'Get funding-mechanisms'
            description: 'Get funding-mechanisms'
            operationId: oc_api_funding_mechanisms_get
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/FinancialAid.FundingMechanism.FundingMechanismListItemViewModelCollection'
    "/financial-aid-campaigns":
        post:
            operationId: oc_api_financial_aid_campaign_post
            x-usecase: FinancialAid\Campaign\CreateFinancialAidCampaign
            x-property-naming-strategy: snake_case
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/FinancialAid.Campaign.CreateFinancialAidCampaignRequest"
                description: 'Financial aid campaign data'
                required: true
            responses:
                201:
                    description: created
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/FinancialAid.Campaign.FinancialAidCampaignResponse"
                400:
                    description: 'bad request'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                "403":
                    description: scope access denied
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
            security:
                -   OAuth2: [ admin_student ]
    '/financial-aid-campaigns/{id}':
        put:
            operationId: oc_api_financial_aid_campaign_put
            x-usecase: FinancialAid\Campaign\EditFinancialAidCampaign
            x-property-naming-strategy: snake_case
            parameters:
                -   name: id
                    in: path
                    required: true
                    schema:
                        type: integer
                        minimum: 1
                        maximum: 2147483647
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/FinancialAid.Campaign.EditFinancialAidCampaignRequest"
                description: 'Financial aid campaign data'
                required: true
            responses:
                200:
                    description: ok
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/FinancialAid.Campaign.FinancialAidCampaignResponse"
                400:
                    description: 'bad request'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                "403":
                    description: scope access denied
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
            security:
                -   OAuth2: [ admin_student ]
    /health-check:
        post:
            summary: 'Any health-check'
            description: 'Any health-check'
            operationId: oc_api_health_check
            responses:
                200:
                    description: Ok

    '/invitations/{invitationId}':
        get:
            tags:
                - Invitation
            summary: 'Retrieves a single invitation data'
            description: 'Validates the id/token combination and gets the invitation data'
            operationId: oc_api_invitation_invitations_get
            responses:
                400:
                    description: 'Bad Request'

                404:
                    description: 'Invitation not found or invitation token mismatch'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Invitation.GetInvitationResponse'
        parameters:
            -   name: invitationId
                in: path
                description: 'The invitation identifier'
                required: true
                schema:
                    type: integer
                    format: int32
                    nullable: false
                    example: 12345
            -   name: token
                in: query
                description: 'The security token'
                required: true
                schema:
                    type: string
                    nullable: false
    '/invitations/{invitationId}/resend':
        parameters:
            -   name: invitationId
                in: path
                description: 'Invitation id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        post:
            tags:
                - Invitation
            summary: 'Post invitation resend'
            description: 'Post invitation resend'
            operationId: oc_api_invitation_resend_post
            responses:
                200:
                    description: Ok

                404:
                    description: 'Not found'
    '/jury-sessions':
        get:
            x-usecase: OC\CLAIRE\BusinessRules\UseCases\LearningActivity\Jury\GetJurySessions
            tags:
                - LearningActivity
            security:
                -   OAuth2: [ user_learning_activity ]
            summary: 'Get jury sessions'
            description: 'Get jury sessions'
            operationId: oc_api_learning_activity_jury_jury_sessions_get
            parameters:
                -   name: learning-path
                    required: false
                    description: 'Filter jury sessions for given learning path'
                    in: query
                    schema:
                        type: integer
                        default: null
                        minimum: 1
                        maximum: 2147483647
                -   name: jury-signatory
                    required: false
                    description: 'Filter jury sessions for given jury signatory'
                    in: query
                    schema:
                        type: integer
                        default: null
                        minimum: 1
                        maximum: 2147483647
                -   name: session-date
                    required: false
                    description: 'Filter jury sessions for given session date'
                    example: 2020-09-15T17:15:29+00:00
                    in: query
                    schema:
                        type: string
                        format: date-time
                        default: null
                -   name: 'before'
                    in: query
                    description: 'Filter jury sessions before a given date'
                    required: false
                    schema:
                        format: date
                        type: string
                        example: '2021-01-01'
                -   name: 'after'
                    in: query
                    description: 'Filter jury sessions after a given date'
                    required: false
                    schema:
                        format: date
                        type: string
                        example: '2021-01-01'
            responses:
                200:
                    description: OK
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/LearningActivity.Jury.JurySessionList'
                206:
                    description: Partial Content
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/LearningActivity.Jury.JurySessionList'
                400:
                    description: 'Bad request'
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
        post:
            tags:
                - LearningActivity
            summary: 'Create a new Jury Session'
            description: 'Create a new Jury Session'
            operationId: oc_api_learning_activity_jury_jury_session_post
            x-usecase: OC\CLAIRE\BusinessRules\UseCases\LearningActivity\Jury\CreateJurySession
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/LearningActivity.Jury.PostJurySessionModel"
            security:
                -   OAuth2: [ user_learning_activity ]
            responses:
                200:
                    description: OK
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/LearningActivity.Jury.JurySessionListItemViewModel"
                400:
                    description: 'Bad request'
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
                409:
                    description: 'Conflict'
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"

    /jury-sessions/{jurySessionId}:
        delete:
            tags:
                - LearningActivity
            summary: 'Delete jury session'
            description: 'Delete jury session'
            operationId: oc_api_learning_activity_jury_jury_session_delete
            x-usecase: OC\CLAIRE\BusinessRules\UseCases\LearningActivity\Jury\DeleteJurySession
            security:
                -   OAuth2: [ user_learning_activity ]
            responses:
                204:
                    description: 'No content'

                400:
                    description: 'Bad request'
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"

                404:
                    description: 'Not found'

            parameters:
                -   name: jurySessionId
                    in: path
                    description: 'Jury Session Id'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 1604192

    /learning-activity/codevolve/token:
        get:
            tags:
                - LearningActivity
                - Codevolve
            summary: 'Get learning-activity codevolve token'
            description: 'Get learning-activity codevolve token'
            operationId: oc_api_web_servies_code_volve_get_token
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LearningActivity.Codevolve.CodevolveToken'
    /me:
        get:
            tags:
                - User
            summary: 'Get me'
            description: 'Get me'
            operationId: oc_api_user_user_me
            responses:
                200:
                    description: Ok

    '/mentors/{userId}':
        get:
            tags:
                - Mentorship
            summary: 'Get mentor'
            description: 'Get mentor details'
            operationId: oc_api_get_mentor
            x-usecase: Mentorship\Mentor\GetMentor
            parameters:
                -   name: userId
                    in: path
                    description: 'User ID'
                    required: true
                    schema:
                        type: integer
                        format: int32
                        nullable: false
                        example: 12345
                        minimum: 1
                        maximum: 2147483647
            responses:
                200:
                    description: OK
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/Mentorship.Mentor.MentorDetailResponse'
                404:
                    description: 'user not found'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
            security:
                -   OAuth2: [ user_learning_activity ]

    '/mentorship-sessions/{mentorshipSessionId}':
        get:
            tags:
                - LearningActivity
                - Mentorship
                - MentorshipSession
            summary: 'Get mentorship-session'
            description: 'Get mentorship-session'
            operationId: oc_api_mentorship_get_mentorship_session
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LearningActivity.Mentorship.MentorshipSession.MentorshipSession'
        parameters:
            -   name: mentorshipSessionId
                in: path
                description: 'MentorshipSession id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/mentoring-sessions':
        post:
            tags:
                - Session
            summary: 'Create a mentoring session'
            description: 'Create a mentoring session between an expert and a recipient at a given date on a specific project'
            responses:
                201:
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Mentorship.MentoringSession.MentoringSessionViewModel'
                400:
                    description: 'Bad request'
                    content:
                        application/json: {}
                409:
                    description: 'Conflict'
                    content:
                        application/json: {}
                404:
                    description: 'Not found'
                    content:
                        application/json: {}
                422:
                    description: 'Unprocessable Entity'
                    content:
                        application/json: {}
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Mentorship.MentoringSession.PostMentoringSessionModel'
            security:
                -   OAuth2: [ user_learning_activity ]
    '/mentorship-sessions/{mentorshipSessionId}/ratings':
        get:
            tags:
                - LearningActivity
                - Mentorship
                - MentorshipSession
            summary: 'Get mentorship-session ratings'
            description: 'Get mentorship-session ratings'
            operationId: oc_api_mentorship_get_mentorship_session_ratings
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Rating.RatingCollection'
        parameters:
            -   name: mentorshipSessionId
                in: path
                description: 'MentorshipSession id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    /oauth2/token:
        post:
            tags:
                - Security
                - OAuth2
            summary: 'Post oauth2 token'
            description: 'Post oauth2 token'
            operationId: oc_api_security_oauth2_token_post
            responses:
                200:
                    description: Ok

    /offers:
        get:
            tags:
                - Product
            summary: 'Get offers'
            description: 'Get offers'
            operationId: oc_api_product_offers_get
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Product.OfferListItemViewModelCollection'
    /organizations:
        get:
            tags:
                - Organization
            summary: 'Get organizations'
            description: 'Get organizations'
            operationId: oc_api_organization_get_all
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Organization.OrganizationViewModelList'
        post:
            tags:
                - Organization
            summary: 'Post organizations'
            description: 'Post organizations'
            operationId: oc_api_organization_post
            responses:
                201:
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Organization.OrganizationViewModelDetail'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Organization.PostOrganizationModel'
    '/organizations/{organizationId}':
        delete:
            tags:
                - Organization
            summary: 'Delete organization'
            description: 'Delete organization'
            operationId: oc_api_organization_delete
            responses:
                204:
                    description: 'No content'

                404:
                    description: 'Not found'

        get:
            tags:
                - Organization
            summary: 'Get organization'
            description: 'Get organization'
            operationId: oc_api_organization_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Organization.OrganizationViewModel'
        parameters:
            -   name: organizationId
                in: path
                description: 'Organization id'
                required: true
                schema:
                    type: string
                    nullable: false
                    example: 0h94jl0t
        patch:
            tags:
                - Organization
            summary: 'Patch organization'
            description: 'Patch organization'
            operationId: oc_api_organization_patch
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Organization.OrganizationViewModelDetail'
                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Organization.PatchOrganizationModel'
    '/organizations/{organizationId}/analytics':
        parameters:
            -   name: organizationId
                in: path
                description: 'Organization id'
                required: true
                schema:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        post:
            tags:
                - Organization
                - Analytic
            summary: 'Post organization analytics'
            description: 'Post organization analytics'
            operationId: oc_api_organization_organization_analytic_post
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Analytic.AnalyticViewModel'
    '/organizations/{organizationId}/invitations':
        get:
            tags:
                - Organization
            summary: 'Get organization invitations'
            description: 'Get organization invitations'
            operationId: oc_api_organization_invitations_get_all
            responses:
                404:
                    description: 'Not found'
                200:
                    description: Ok
        parameters:
            -   name: organizationId
                in: path
                description: 'Organization id'
                required: true
                schema:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        post:
            tags:
                - Organization
            summary: 'Post organization invitations'
            description: 'Post organization invitations'
            operationId: oc_api_organization_invitations_post
            responses:
                404:
                    description: 'Not found'
                200:
                    description: Ok
    '/organizations/{organizationId}/teams':
        get:
            tags:
                - Organization
                - Team
            summary: 'Get organization teams'
            description: 'Get organization teams'
            operationId: oc_api_organization_team_get_all
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Team.TeamViewModelList'
        parameters:
            -   name: organizationId
                in: path
                description: 'Organization id'
                required: true
                schema:
                    type: string
                    nullable: false
                    example: 0h94jl0t
            -   name: sort
                in: query
                description: 'sort teams by name, pending invitations or number of members'
                schema:
                    type: string
                    example: name
        post:
            tags:
                - Organization
                - Team
            summary: 'Post organization teams'
            description: 'Post organization teams'
            operationId: oc_api_organization_team_post
            responses:
                201:
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Team.TeamViewModelDetail'
                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Organization.Team.PostOrganizationTeamModel'
    '/organizations/{organizationId}/users':
        get:
            tags:
                - Organization
                - User
            summary: 'Get organization users'
            description: 'Get organization users'
            operationId: oc_api_organization_user_get_all
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Organization.User.OrganizationUserViewModelList'
        parameters:
            -   name: organizationId
                in: path
                description: 'Organization id'
                required: true
                schema:
                    type: string
                    nullable: false
                    example: 0h94jl0t
        post:
            tags:
                - Organization
                - User
            summary: 'Post organization users'
            description: 'Post organization users'
            operationId: oc_api_organization_user_post
            responses:
                201:
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Organization.User.OrganizationUserViewModelDetail'
                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Organization.User.PostOrganizationUserModel'
    '/organizations/{organizationId}/users/{userId}':
        delete:
            tags:
                - Organization
                - User
            summary: 'Delete organization user'
            description: 'Delete organization user'
            operationId: oc_api_organization_organization_user_delete
            responses:
                204:
                    description: 'No content'

                404:
                    description: 'Not found'

                200:
                    description: Ok

        parameters:
            -   name: organizationId
                in: path
                description: 'Organization id'
                required: true
                schema:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/organizations/{organizationId}/users/{userId}/roles':
        get:
            tags:
                - Organization
                - User
            summary: 'Get organization user roles'
            description: 'Get organization user roles'
            operationId: oc_api_organization_user_role_get_all
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Organization.User.OrganizationRoleViewModelList'
        parameters:
            -   name: organizationId
                in: path
                description: 'Organization id'
                required: true
                schema:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        patch:
            tags:
                - Organization
                - User
            summary: 'Patch organization user roles'
            description: 'Patch organization user roles'
            operationId: oc_api_organization_user_role_patch
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Organization.User.OrganizationRoleViewModelList'
                404:
                    description: 'Not found'

    /paths:
        get:
            tags:
                - LearningContent
                - LearningPath
            summary: 'Get paths'
            description: 'Get paths'
            operationId: oc_api_learning_content_learning_path_learning_paths_get
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.LearningPath.Impl.LearningPathDetailImplCollection'
    '/paths/{learningPathId}':
        get:
            tags:
                - LearningContent
                - LearningPath
            summary: 'Get path'
            description: 'Get path'
            operationId: oc_api_learning_content_learning_path_learning_path_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.LearningPath.Impl.LearningPathDetailImpl'
        parameters:
            -   name: learningPathId
                in: path
                description: 'Learning path id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 59
    /policies:
        get:
            tags:
                - Policy
            summary: 'Get policies'
            description: 'Get policies'
            operationId: oc_api_policy_get_policies
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy.PolicyList'
    '/policies/{id}':
        get:
            tags:
                - Policy
            summary: 'Get policy '
            description: 'Get policy '
            operationId: oc_api_policy_get_policy
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Policy.PolicyDetail'
        parameters:
            -   name: id
                in: path
                description: Id
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/policy/{policyId}/accept':
        parameters:
            -   name: policyId
                in: path
                description: 'Policy id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        post:
            tags:
                - Policy
            summary: 'Post policy  accept'
            description: 'Post policy  accept'
            operationId: oc_api_policy_accept_policy
            responses:
                200:
                    description: Ok

    '/project-sessions/{projectSessionId}':
        get:
            tags:
                - LearningActivity
                - ProjectSession
            summary: 'Get project-session'
            description: 'Get project-session'
            operationId: oc_api_learning_activity_project_session_project_session_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LearningActivity.ProjectSession.ProjectSession'
        parameters:
            -   name: projectSessionId
                in: path
                description: 'Project session id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/project-sessions/{projectSessionId}/files':
        parameters:
            -   name: projectSessionId
                in: path
                description: 'Project session id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        post:
            tags:
                - LearningActivity
                - ProjectSession
            summary: 'Post project-session files'
            description: 'Post project-session files'
            operationId: oc_api_learning_activity_student_project_file_post
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Student.Project.PostStudentProjectFileModel'
    '/project-sessions/{projectSessionId}/mark-as-ready-for-review':
        parameters:
            -   name: projectSessionId
                in: path
                description: 'Project session id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        post:
            tags:
                - LearningActivity
                - ProjectSession
            summary: 'Post project-session mark-as-ready-for-review'
            description: 'Post project-session mark-as-ready-for-review'
            operationId: oc_api_learning_activity_project_session_mark_as_ready_for_review_post
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LearningActivity.ProjectSession.MarkProjectAsReadyForReviewViewModel'

    '/projects/{projectId}':
        get:
            tags:
                - LearningContent
                - Project
            summary: 'Get project'
            description: 'Get project'
            operationId: oc_api_project_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.Project.ProjectDetail'
        parameters:
            -   name: projectId
                in: path
                description: 'Project id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/projects/{projectId}/courses':
        get:
            tags:
                - LearningContent
                - Project
            summary: 'Get project courses'
            description: 'Get project courses'
            operationId: oc_api_project_courses_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.Course.CourseList'
        parameters:
            -   name: projectId
                in: path
                description: 'Project id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/projects/{projectId}/external-resources':
        get:
            tags:
                - LearningContent
                - Project
                - ProjectExternalResource
            summary: 'Get project external-resources'
            description: 'Get project external-resources'
            operationId: oc_api_learning_content_project_external_resource_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LearningContent.Content.ExternalResourceListItemViewModelCollection'
        parameters:
            -   name: projectId
                in: path
                description: 'Project id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        patch:
            tags:
                - LearningContent
                - Project
                - ProjectExternalResource
            summary: 'Patch project external-resources'
            description: 'Patch project external-resources'
            operationId: oc_api_learning_content_project_external_resource_patch
            responses:
                200:
                    description: Ok

                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LearningContent.Project.ProjectExternalResource.PatchExternalResourcesModel'
        post:
            tags:
                - LearningContent
                - Project
                - ProjectExternalResource
            summary: 'Post project external-resources'
            description: 'Post project external-resources'
            operationId: oc_api_learning_content_project_external_resource_post
            responses:
                201:
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LearningContent.Content.ExternalResourceDetailViewModel'
                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/LearningContent.Project.ProjectExternalResource.PostExternalResourceModel'
    '/projects/{projectId}/external-resources/{externalResourceId}':
        delete:
            tags:
                - LearningContent
                - Project
                - ProjectExternalResource
            summary: 'Delete project external-resource'
            description: 'Delete project external-resource'
            operationId: oc_api_learning_content_project_external_resource_delete
            responses:
                204:
                    description: 'No content'

                404:
                    description: 'Not found'

        parameters:
            -   name: projectId
                in: path
                description: 'Project id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: externalResourceId
                in: path
                description: 'ExternalResource id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/projects/{projectId}/mentor-guide':
        get:
            tags:
                - LearningContent
                - Project
            summary: 'Get project mentor-guide'
            description: 'Get project mentor-guide'
            operationId: oc_api_project_mentor_guide_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LearningContent.Project.MentorGuide.Impl.ProjectMentorGuide'
        parameters:
            -   name: projectId
                in: path
                description: 'Project id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/projects/{projectId}/skills':
        get:
            tags:
                - LearningContent
                - Project
                - ProjectSkill
            summary: 'Get project skills'
            description: 'Get project skills'
            operationId: oc_api_learning_content_project_project_skill_get_project_skills
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.Skill.SkillList'
        parameters:
            -   name: projectId
                in: path
                description: 'Project id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        put:
            tags:
                - LearningContent
                - Project
                - ProjectSkill
            summary: 'Put project skills'
            description: 'Put project skills'
            operationId: oc_api_learning_content_project_project_skill_update_project_skills
            responses:
                200:
                    description: Ok

                404:
                    description: 'Not found'

    /saml/connection:
        post:
            tags:
                - Security
                - SAML
            summary: 'Post SAML Connection'
            description: 'Creates a new SAML connection for SSO by providing all the necessary information'
            responses:
                400:
                    description: 'Bad request'

                409:
                    description: 'A SAML connection already exists for this organization'

                422:
                    description: 'The organization does not exist'

                201:
                    description: Created

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Security.SAMLConnection'

    /saml/connection/metadata-endpoint:
        post:
            tags:
                - Security
                - SAML
            summary: 'Post SAML Connection from metadata endpoint'
            description: 'Creates a new SAML connection for SSO by providing a metadata endpoint that will be parsed to fulfil the necessary information'
            responses:
                400:
                    description: 'Bad request'

                409:
                    description: 'A SAML connection already exists for this organization'

                422:
                    description: 'The organization does not exist'

                201:
                    description: Created

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Security.SAMLConnectionFromMetadataEndpoint'

    '/saml/{connectionPublicId}/authentication-request/{identifier}':
        get:
            tags:
                - Security
                - SAML
            summary: Get redirection information required to perform SSO login
            description: Returns the URL to redirect to, to trigger the SSO login via SAML AuthNRequest on an IDP
            operationId: oc_api_security_saml_authnrequest
            responses:
                400:
                    description: 'User identifier format is invalid, target path is missing or not a URL'

                403:
                    description: 'User is not allowed to connect via SSO or his organization has no SSO enabled'

                404:
                    description: 'User or SAML connection not found'

                422:
                    description: 'Could not build the authentication request'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Security.SAML.AuthenticationRequestViewModel'
        parameters:
            -   name: connectionPublicId
                in: path
                description: 'The SAML connection ID that is linked to the organization the user is part of, and that uses the SAML authentication scheme.'
                required: true
                schema:
                    type: string
                    nullable: false
                    example: openclassrooms
            -   name: identifier
                in: path
                description: 'The user''s identifier, i.e. their e-mail address, who has to use this SAML connection'
                required: true
                schema:
                    type: string
                    nullable: false
                    example: john.doe@example.com
            -   name: targetPath
                in: query
                description: 'Optional URL, that can be absolute or relative, to redirect to after coming back from the IDP, will default to dashboard if not found.'
                required: false
                schema:
                    type: string
                    nullable: false
                    example: 'https://www.openclassrooms.lan/fr/dashboard'

    '/saml/{connectionPublicId}/scim/ServiceProviderConfig':
        get:
            tags:
                - IdentityManagement-Provisioning
            summary: 'Gets the SCIM Service Provider Config'
            description: 'Discover the SCIM API features'
            operationId: 'oc_api_provisioning_scim_serviceproviderconfig'
            parameters:
                -   name: 'connectionPublicId'
                    in: path
                    description: 'SAML Connection public id that is linked to an organization'
                    required: true
                    schema:
                        type: string
                        nullable: false
                        example: 'openclassrooms'
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Schemas.ServiceProviderConfig'
                        application/scim+json:
                            schema:
                                $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Schemas.ServiceProviderConfig'
                400:
                    description: 'Bad request'
            security:
                -   OAuth2: [ organization ]

    '/saml/{connectionPublicId}/scim/Schemas':
        get:
            tags:
                - IdentityManagement-Provisioning
            summary: 'Get all the supported Schemas by the SCIM API'
            description: 'Discover the SCIM API features'
            operationId: 'oc_api_provisioning_scim_schemas'
            parameters:
                -   name: 'connectionPublicId'
                    in: path
                    description: 'SAML Connection public id that is linked to an organization'
                    required: true
                    schema:
                        type: string
                        nullable: false
                        example: 'openclassrooms'
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.Schemas'
                        application/scim+json:
                            schema:
                                $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.Schemas'
                400:
                    description: 'Bad request'
            security:
                -   OAuth2: [ organization ]

    '/saml/{connectionPublicId}/scim/Schemas/{schemaUrn}':
        get:
            tags:
                - IdentityManagement-Provisioning
            summary: 'Get a specific supported Schemas by the SCIM API'
            description: 'Discover the SCIM API features'
            operationId: 'oc_api_provisioning_scim_schema'
            parameters:
                -   name: 'connectionPublicId'
                    in: path
                    description: 'SAML Connection public id that is linked to an organization'
                    required: true
                    schema:
                        type: string
                        nullable: false
                        example: 'openclassrooms'
                -   name: 'schemaUrn'
                    in: path
                    description: 'Schema urn for a specific schema'
                    required: true
                    schema:
                        type: string
                        nullable: false
                        example: 'urn:ietf:params:scim:schemas:core:2.0:User'
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.Schemas'
                        application/scim+json:
                            schema:
                                $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.Schemas'
                400:
                    description: 'Bad request'
            security:
                -   OAuth2: [ organization ]

    '/saml/{connectionPublicId}/scim/Users':
        get:
            tags:
                - IdentityManagement-Provisioning
            summary: 'Get the list of users'
            description: 'Retrieve a paginated list of users for a given organization'
            operationId: 'oc_api_provisioning_scim_users_get'
            parameters:
                -   name: 'connectionPublicId'
                    in: path
                    description: 'SAML Connection public id that is linked to an organization'
                    required: true
                    schema:
                        type: string
                        nullable: false
                        example: 'openclassrooms'
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.List.Users'
                        application/scim+json:
                            schema:
                                $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.List.Users'
                400:
                    description: 'Bad request'
                404:
                    description: 'Not Found'
            security:
                -   OAuth2: [ organization ]

    '/saml/{connectionPublicId}/scim/Users/{userPublicId}':
        get:
            tags:
                - IdentityManagement-Provisioning
            summary: 'Get a user for SCIM service'
            description: 'Retrieve user detail data from its public identifier'
            operationId: 'oc_api_provisioning_scim_user_get'
            parameters:
                -   name: 'connectionPublicId'
                    in: path
                    description: 'SAML Connection public id that is linked to an organization'
                    required: true
                    schema:
                        type: string
                        nullable: false
                    example: 'openclassrooms'
                -   name: 'userPublicId'
                    in: path
                    description: 'A public identifier for a user'
                    required: true
                    schema:
                        type: string
                        nullable: false
                    example: '3rrf5dfdt3478'
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.User'
                        application/scim+json:
                            schema:
                                $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.User'
                400:
                    description: 'Bad request'
                404:
                    description: 'Not Found'
            security:
                -   OAuth2: [ organization ]

    '/saml/{connectionPublicId}/scim/ResourceTypes':
        get:
            tags:
                - IdentityManagement-Provisioning
            summary: 'Get all the Resource Types for the SCIM API'
            description: 'Discover the SCIM API features'
            operationId: 'oc_api_provisioning_scim_resource_types'
            parameters:
                -   name: 'connectionPublicId'
                    in: path
                    description: 'SAML Connection public id that is linked to an organization'
                    required: true
                    schema:
                        type: string
                        nullable: false
                        example: 'openclassrooms'
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.ResourceTypes'
                        application/scim+json:
                            schema:
                                $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.ResourceTypes'
                400:
                    description: 'Bad request'
            security:
                -   OAuth2: [ organization ]

    '/saml/{connectionPublicId}/scim/ResourceTypes/{resourceType}':
        get:
            tags:
                - IdentityManagement-Provisioning
            summary: 'Get a specific Resource Type for the SCIM API'
            description: 'Discover the SCIM API features'
            operationId: 'oc_api_provisioning_scim_resource_type'
            parameters:
                -   name: 'connectionPublicId'
                    in: path
                    description: 'SAML Connection public id that is linked to an organization'
                    required: true
                    schema:
                        type: string
                        nullable: false
                        example: 'openclassrooms'
                -   name: 'resourceType'
                    in: path
                    description: 'A specific resource type'
                    required: true
                    schema:
                        type: string
                        nullable: false
                        example: 'User'
            responses:
                200:
                    description: Success
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.ResourceTypes'
                        application/scim+json:
                            schema:
                                $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.ResourceTypes'
                400:
                    description: 'Bad request'
            security:
                -   OAuth2: [ organization ]
    '/signatories':
        get:
            x-usecase: OC\CLAIRE\BusinessRules\UseCases\Certification\Signatory\GetSignatories
            tags:
                - Certification
            security:
                -   OAuth2: [ user_learning_activity ]
            summary: 'Get Signatories'
            description: 'Get the list of signatories'
            operationId: oc_api_certification_signatories_get
            parameters:
                -   name: search-terms
                    required: false
                    description: 'Filter signatories from given terms in firstname, lastname, position title'
                    in: query
                    schema:
                        type: string
                        default: null
                        example: 'lorem Ipsum'
            responses:
                200:
                    description: OK
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/Certification.Signatory.SignatoryList'
                206:
                    description: Partial Content
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/Certification.Signatory.SignatoryList'
                400:
                    description: 'Bad request'
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
    '/sessions/{sessionId}':
        get:
            tags:
                - Session
            summary: 'Get a session'
            description: 'Get a session'
            operationId: oc_api_get_session
            deprecated: true
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Session.MentorshipSessionDetailViewModel'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345

    '/mentoring-sessions/{mentoringSessionId}/cancel':
        post:
            tags:
                - Session
                - Mentorship
            summary: 'Cancel a mentoring session'
            description: 'Cancels a mentoring session and sets its status to canceled, late canceled or mark student as absent'
            operationId: oc_api_cancel_mentoring_session
            x-usecase: Mentorship\MentorshipSession\CancelMentoringSession
            parameters:
                -   name: mentoringSessionId
                    in: path
                    description: 'Mentoring Session Id'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 12345
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Mentorship.MentoringSession.CancelMentoringSessionRequest'
            responses:
                404:
                    description: 'session or user not found'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                400:
                    description: 'session type is not mentoring'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                409:
                    description: 'SessionStatusIsNotPending'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                200:
                    description: Ok
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/Mentorship.MentoringSession.MentoringSessionViewModel'

    '/mentoring-sessions/{mentoringSessionId}':
        get:
            tags:
                - Session
                - Mentorship
            summary: 'Get a mentoring session'
            description: 'Get a mentoring type session'
            operationId: oc_api_get_mentoring_session
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Session.MentorshipSessionDetailViewModel'
        parameters:
            -   name: mentoringSessionId
                in: path
                description: 'Mentoring Session Id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        patch:
            tags:
                - Session
                - Mentorship
            summary: 'Edit a mentoring session'
            description: 'Edit the student facing note, project, or date of a mentoring session'
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Mentorship.MentoringSession.MentoringSessionViewModel'
                404:
                    description: 'session or user not found'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                400:
                    description: ''
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                409:
                    description: 'StudentSessionDateConflictException| MentorSessionDateConflictException| SessionAlreadyExistsException'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Mentorship.MentoringSession.PatchMentoringSessionModel'
            security:
                -   OAuth2: [ user_learning_activity ]

    '/mentoring-sessions/{mentoringSessionId}/complete':
        post:
            tags:
                - Session
                - Mentorship
            summary: 'Complete a mentoring session'
            description: 'Completes a mentoring session with student facing note, internal note and project progression'
            operationId: oc_api_complete_mentoring_session
            x-usecase: Mentorship\MentorshipSession\CompleteMentoringSession
            parameters:
                -   name: mentoringSessionId
                    in: path
                    description: 'Mentoring Session Id'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 12345
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Mentorship.MentoringSession.CompleteMentoringSessionRequest'
            responses:
                404:
                    description: 'session or user not found'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                400:
                    description: 'session type is not mentoring'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                409:
                    description: 'InvalidProjectCompletion | SessionStatusIsNotPending | ProjectCompletionRegression | ChronologicallyInvalidProjectCompletion | CannotCompleteMentorshipSession'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                200:
                    description: Ok
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/Mentorship.MentoringSession.MentoringSessionViewModel'

    '/support-expert-assignment/{supportAssignmentId}':
        delete:
            tags:
                - Support
            summary: 'Delete support-expert-assignment '
            description: 'Delete support-expert-assignment '
            operationId: oc_api_support_expert_assignment_delete
            responses:
                204:
                    description: 'No content'

                404:
                    description: 'Not found'

        parameters:
            -   name: supportAssignmentId
                in: path
                description: 'SupportAssignment id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345

    '/supports/{supportRecipientPeriodId}/expert-assignment':
        parameters:
            -   name: supportRecipientPeriodId
                in: path
                description: 'SupportRecipientPeriod id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        post:
            tags:
                - Support
            summary: 'Post support expert-assignment'
            description: 'Post support expert-assignment'
            operationId: oc_api_support_expert_assignment_post
            responses:
                201:
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Support.SupportAssignmentViewModelDetail'
                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Support.PostExpertAssignment'

    '/supports/{supportRecipientPeriodId}/expert-replacement':
        parameters:
            -   name: supportRecipientPeriodId
                in: path
                description: 'SupportRecipientPeriod id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        post:
            tags:
                - Support
            summary: 'Post support expert-replacement'
            description: 'Post support expert-replacement'
            operationId: oc_api_support_expert_replacement_post
            responses:
                201:
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Support.SupportAssignmentViewModelDetail'
                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Support.PostSupportExpertReplacement'
    '/teams/{teamId}':
        get:
            tags:
                - Team
            summary: 'Get information about a team'
            description: 'Get information about a team'
            operationId: oc_api_team_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Team.TeamViewModelDetail'
        parameters:
            -   name: teamId
                in: path
                description: 'Team id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/teams/{teamId}/analytics':
        parameters:
            -   name: teamId
                in: path
                description: 'Team id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        post:
            tags:
                - Team
                - Analytic
            summary: 'Post team analytics'
            description: 'Post team analytics'
            operationId: oc_api_team_team_analytic_post
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Analytic.AnalyticViewModel'

    '/teams/{teamId}/invitations':
        get:
            tags:
                - Team
            summary: 'Get team invitations'
            description: 'Get all the invitations sent to invite users to join a team'
            operationId: oc_api_team_team_invitations_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Team.GetTeamInvitations'
        parameters:
            -   name: teamId
                in: path
                description: 'Team id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        post:
            tags:
                - Team
            summary: 'Post team invitations'
            description: 'Post team invitations'
            operationId: oc_api_team_team_invitations_post
            responses:
                201:
                    description: Created

                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Team.PostTeamInvitations'
    '/teams/{teamId}/users':
        get:
            tags:
                - Team
                - User
            summary: 'Get team users'
            description: 'Get team users'
            operationId: oc_api_get_team_users
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Team.User.TeamUserCollection'
        parameters:
            -   name: teamId
                in: path
                description: 'Team id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/teams/{teamId}/users/{userId}':
        delete:
            tags:
                - Team
                - User
            summary: 'Delete team user'
            description: 'Delete team user'
            operationId: oc_api_team_user_delete
            responses:
                204:
                    description: 'No content'

                404:
                    description: 'Not found'

        parameters:
            -   name: teamId
                in: path
                description: 'Team id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        post:
            tags:
                - Team
                - User
            summary: 'Post team user'
            description: 'Post team user'
            operationId: oc_api_team_user_add
            responses:
                201:
                    description: Created

                404:
                    description: 'Not found'

    '/teams/{teamId}/users/{userId}/roles':
        parameters:
            -   name: teamId
                in: path
                description: 'Team id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        patch:
            tags:
                - Team
                - User
            summary: 'Patch team user roles'
            description: 'Patch team user roles'
            operationId: oc_api_edit_team_user_roles
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Team.User.TeamUserRolesViewModelCollection'
                404:
                    description: 'Not found'

    '/training-periods/{ulid}/transfer':
        post:
            operationId: oc_api_training_period_transfer_post
            x-usecase: Student\LearningPath\TrainingPeriod\TransferTrainingPeriod
            x-property-naming-strategy: snake_case
            parameters:
                -   name: ulid
                    in: path
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Student.LearningPath.TransferTrainingPeriodRequest'
                description: 'Training period data'
                required: true
            responses:
                200:
                    description: transferred
                400:
                    description: 'bad request'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                403:
                    description: 'scope access denied'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                404:
                    description: 'user not found'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                422:
                    description: 'learning path not found'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
            security:
                -   OAuth2:
                        - admin_student
    '/user-authentication-schemes/{identifier}':
        get:
            tags:
                - Security
            summary: 'Get user authentication scheme'
            description: >
                Get the authentication scheme for a user to log in with (e.g. password, SAML, ...).
                Check out the description of the Link header that is returned for SAML scheme.
            operationId: oc_api_security_user_authentication_schemes
            responses:
                400:
                    description: 'Bad Request'

                200:
                    description: Ok
                    headers:
                        Link:
                            schema:
                                type: string
                            description: >
                                When the scheme in response is SAML, you'll also get a Link header with a rel type *saml.provider*
                                containing a route you can call for further processing, as well as two attributes: *identifier* and
                                *connectionId* that are those referenced in the url.
                                Example: <https://api.openclassrooms.lan/saml/openclassrooms/authentication-request/john.doe@example.com>;rel="saml.provider";identifier="john.doe%40example.com";connectionId="openclassrooms"
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Security.AuthenticationSchemes.UserAuthenticationSchemeViewModel'
        parameters:
            -   name: identifier
                in: path
                description: 'The user''s identifier, i.e. their e-mail address'
                required: true
                schema:
                    type: string
                    nullable: false
                    example: john.doe@example.com
            -   name: targetPath
                in: query
                description: 'Represents the redirection target path or URL after successful authentication'
                required: false
                schema:
                    type: string
                    nullable: false
                    example: '/fr/welcome'

    /user-login-token:
        post:
            tags:
                - Security
                - SecurityToken
            summary: 'Post user-login-token'
            description: 'Post user-login-token'
            operationId: oc_api_security_login_token_post
            responses:
                201:
                    description: Created

    /users:
        post:
            tags:
                - User
            summary: 'Post users'
            description: 'Post users'
            operationId: oc_api_user_user_post
            responses:
                201:
                    description: Created

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User.PostUser'
    /users/request-new-password:
        post:
            tags:
                - User
            summary: 'Request a new password'
            description: 'Request a new password using the user''s email address. Users in an organization with SSO enabled cannot request a new password.'
            operationId: oc_api_user_request_new_password
            responses:
                201:
                    description: Created

                404:
                    description: 'Not found'

                403:
                    description: 'Access denied'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User.RequestNewPassword'
    '/users/{userId}':
        get:
            tags:
                - User
            summary: 'Get user'
            description: 'Returns a user''s basic info'
            operationId: oc_api_user_user_get
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User.UserViewModel'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        patch:
            tags:
                - User
            summary: 'Update a user'
            description: 'Update a user''s first and or last name'
            operationId: oc_api_user_user_patch
            responses:
                200:
                    description: Ok

                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User.PatchUser'
    '/users/{userId}/availabilities':
        get:
            tags:
                - Availability
                - Calendar
                - User
            summary: 'Get user availabilities'
            description: 'Get user availabilities. Caller must have role ROLE_API_USER_CALENDAR. Response is paginated.'
            operationId: oc_api_user_availabilities_get
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Calendar.Availability.AvailabilityViewModelList'
            parameters:
                -   in: query
                    name: since
                    schema:
                        format: date
                        type: string
                        example: 2019-11-12T00:00:00+00:00
                    description: 'The date from which to search from'
                -   in: query
                    name: until
                    schema:
                        format: date
                        type: string
                        example: 2019-11-14T00:00:00+00:00
                    description: 'The date to which to search until'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        post:
            tags:
                - Availability
                - Calendar
                - User
            summary: 'Post user availabilities'
            description: 'Post user availabilities'
            operationId: oc_api_user_availabilities_post
            responses:
                201:
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Calendar.Availability.AvailabilityViewModelDetail'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Calendar.Availability.PostAvailability'
    '/users/{userId}/birth-information':
        get:
            tags:
                - User
                - BirthInformation
            summary: 'Get a user''s birth information'
            description: 'Get a user''s birth information which includes date and place of birth'
            operationId: oc_api_user_birth_information_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User.BirthInformation.BirthInformationViewModel'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        patch:
            tags:
                - User
                - BirthInformation
            summary: 'Edit a user''s birth information'
            description: 'Update part of a user''s birth information'
            operationId: oc_api_user_birth_information_patch
            responses:
                200:
                    description: Ok

                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User.BirthInformation.PatchBirthInformation'
        put:
            tags:
                - User
                - BirthInformation
            summary: 'Update a user''s birth information'
            description: 'Update all of a user''s birth information'
            operationId: oc_api_user_birth_information_put
            responses:
                200:
                    description: Ok

                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User.BirthInformation.PutBirthInformation'
    '/users/{userId}/change-email':
        post:
            tags:
                - User
            summary: 'Update a user''s email'
            description: 'Update a user''s email'
            operationId: oc_api_user_email_post
            x-controller: OC\ApiBundle\Controller\User\Email\PostChangeEmailController
            parameters:
                -   name: userId
                    in: path
                    description: 'User id'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 12345
            responses:
                202:
                    description: Accepted
                400:
                    description: 'bad request'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                403:
                    description: 'access denied'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                404:
                    description: 'user not found'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
                409:
                    description: 'email already exists'
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User.Email.PostChangeEmail'
            security:
                -   OAuth2: [ openclassrooms_client, current_user ]
    '/users/{userId}/communication-settings':
        get:
            tags:
                - User
                - Communication
            summary: 'Get a user''s communication settings'
            description: 'Get a user''s communication settings such as whether they accept to receive the newsletter'
            operationId: oc_api_user_communication_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User.Communication.CommunicationSettingList'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        patch:
            tags:
                - User
                - Communication
            summary: 'Update a user''s communication settings'
            description: 'Update a user''s communication settings, such as whether they agree to receive the newsletter'
            operationId: oc_api_user_communication_patch
            responses:
                200:
                    description: Ok

                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User.Communication.PatchCommunicationSettings'
    '/users/{userId}/communications':
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        put:
            tags:
                - User
                - Communication
            summary: 'Deprecated, use PATCH /users/{userId}/communication-settings instead'
            description: 'Deprecated, use PATCH /users/{userId}/communication-settings instead'
            operationId: oc_api_user_communication
            responses:
                200:
                    description: Ok

                404:
                    description: 'Not found'

            deprecated: true
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User.Communication.PutCommunicationSettings'
    '/users/{userId}/courses/{courseId}':
        get:
            tags:
                - LearningActivity
                - Course
            summary: 'Get a user''s information regarding a course'
            description: 'Get a user''s information on a specific course, such as whether they followed or completed the course'
            operationId: oc_api_learning_activity_course_course_with_user_information_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.CourseParticipation.CourseWithUserInformation.CourseDetailWithUserInformation'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
    '/users/{userId}/courses/{courseId}/chapters/{chapterId}':
        get:
            tags:
                - LearningActivity
                - Course
                - Chapter
            summary: 'Get a user''s information regarding a course chapter'
            description: 'Get a user''s information about a specific course chapter, such as whether they completed or not that chapter'
            operationId: oc_api_learning_activity_course_chapter_with_user_information_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LearningActivity.Course.Chapter.ChapterWithUserInformation'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
            -   name: chapterId
                in: path
                description: 'Chapter id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1604192
    '/users/{userId}/courses/{courseId}/follow':
        delete:
            tags:
                - LearningActivity
                - Course
                - FollowedCourse
            summary: 'Unfollow a course for a user'
            description: 'Removes the course from the user''s followed courses'
            operationId: oc_api_learning_activity_course_followed_course_follow_course_delete
            responses:
                204:
                    description: 'No content'

                404:
                    description: 'Not found'

        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
        post:
            tags:
                - LearningActivity
                - Course
                - FollowedCourse
            summary: 'Follow a course for a user'
            description: 'Adds a course to a user''s list of followed courses'
            operationId: oc_api_learning_activity_course_followed_course_follow_course_post
            responses:
                201:
                    description: Created

                404:
                    description: 'Not found'

    '/users/{userId}/courses/{courseId}/pre-register':
        delete:
            tags:
                - LearningActivity
                - Course
                - FollowedCourse
            summary: 'Cancel a user''s preregistration to a course'
            description: 'Cancel a user''s preregistration to a course'
            operationId: oc_api_learning_activity_course_followed_course_pre_register_to_course_delete
            responses:
                204:
                    description: 'No content'

                404:
                    description: 'Not found'

        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
        post:
            tags:
                - LearningActivity
                - Course
                - FollowedCourse
                - User
            summary: 'Pre-register a user to a course'
            description: 'Pre-register a user to a course'
            operationId: oc_api_learning_activity_course_followed_course_pre_register_to_course_post
            responses:
                201:
                    description: Created

    '/users/{userId}/courses/{courseId}/skills':
        get:
            tags:
                - User
                - LearningActivity
                - Course
                - Skill
            summary: 'Get user course skills'
            description: 'Get user course skills'
            operationId: oc_api_learning_activity_course_skills_with_user_information_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.SkillParticipation.SkillListItemWithUserInformationCollection'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
    '/users/{userId}/courses/{courseId}/table-of-content':
        get:
            tags:
                - User
                - LearningActivity
                - Course
                - Toc
            summary: 'Get a user''s information regarding a course''s table of content'
            description: 'Get a user''s information regarding a course''s table of content. Gives information on the user''s course progress'
            operationId: oc_api_learning_activity_course_toc_with_user_information_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.CourseParticipation.Toc.CourseItemWithUserInformation'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: courseId
                in: path
                description: 'Course id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1603881
    '/users/{userId}/events':
        get:
            tags:
                - User
                - Calendar
                - Event
            summary: 'Get user events'
            description: 'Get user events'
            operationId: oc_api_user_events_get
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Calendar.Event.EventViewModelList'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/users/{userId}/expected-benefits':
        get:
            tags:
                - User
                - ExpectedBenefits
            summary: 'Get a user''s expected benefits'
            description: 'Get a user''s expected benefits'
            operationId: oc_api_user_expected_benefits_get
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User.ExpectedBenefits.UserExpectedBenefitViewModelCollection'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        put:
            tags:
                - User
                - ExpectedBenefits
            summary: 'Put user expected benefits'
            description: 'Put user expected benefits'
            operationId: oc_api_user_expected_benefits_put
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User.ExpectedBenefits.ExpectedBenefitModelList'
    '/users/{userId}/financial-aids':
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        post:
            tags:
                - User
                - FinancialAid
            summary: 'Create a new financial aid'
            description: 'Create a new financial'
            operationId: oc_api_user_financial_aid_post
            responses:
                201:
                    description: Created

                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/FinancialAid.PostFinancialAid'
    '/users/{userId}/followed-courses/':
        get:
            tags:
                - LearningActivity
                - Course
                - FollowedCourse
            summary: 'Get the list of followed courses of a user'
            description: 'Get all the courses that a user is currently following'
            operationId: oc_api_learning_activity_course_followed_course_followed_courses_get
            responses:
                404:
                    description: 'Not found'
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.CourseParticipation.CourseWithUserInformation.CourseDetailWithUserInformationCollection'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/users/{userId}/followed-path':
        get:
            tags:
                - LearningActivity
                - LearningPath
                - User
            summary: 'Get the learning path that a user is currently following'
            description: 'Get the learning path that a user is currently following with user related information, such as their path progress'
            operationId: oc_api_learning_activity_learning_path_followed_learning_path_get
            responses:
                404:
                    description: 'Not found'
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.LearningPathParticipation.LearningPathDetailWithUserInformation'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/users/{userId}/followed-path/projects':
        get:
            tags:
                - LearningActivity
                - LearningPath
                - Project
            summary: 'Get all projects linked to the user''s followed learning path'
            description: 'Get all projects linked to the user''s followed learning path. The projects contain user information information such as project progress or status'
            operationId: oc_api_learning_activity_learning_path_followed_learning_path_projects_get
            responses:
                404:
                    description: 'Not found'
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.Project.ProjectList'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/users/{userId}/interests':
        get:
            tags:
                - User
                - Interest
            summary: 'Get a user''s interests'
            description: 'Get a user''s interests'
            operationId: oc_api_user_interests_get
            responses:
                404:
                    description: 'Not found'
                200:
                    description: Ok

        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        post:
            tags:
                - User
                - Interest
            summary: 'Post user interests'
            description: 'Post user interests'
            operationId: oc_api_user_interests_post
            responses:
                201:
                    description: Created

                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User.Interest.PostUserInterests'
    '/users/{userId}/last-student-path-dossier':
        get:
            tags:
                - LearningActivity
                - StudentPathDossier
            summary: 'Get user last-student-path-dossier'
            description: 'Get user last-student-path-dossier'
            operationId: oc_api_learning_activity_student_path_dossier_student_path_dossier_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LearningActivity.StudentPathDossier.StudentPathDossier'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        patch:
            tags:
                - LearningActivity
                - StudentPathDossier
            summary: 'Patch user last-student-path-dossier'
            description: 'Patch user last-student-path-dossier'
            operationId: oc_api_learning_activity_student_path_dossier_student_path_dossier_patch
            responses:
                200:
                    description: Ok

                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/StudentPathDossier.PatchStudentPathDossier'
    '/users/{userId}/paths':
        get:
            tags:
                - LearningActivity
                - LearningPath
            summary: 'Get user paths'
            description: 'Get user paths'
            operationId: oc_api_learning_activity_learning_path_learning_paths_with_user_information_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.LearningPathParticipation.LearningPathListItemWithUserInformationCollection'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/users/{userId}/paths/{pathId}':
        get:
            tags:
                - LearningActivity
                - LearningPath
            summary: 'Get user path'
            description: 'Get user path'
            operationId: oc_api_learning_activity_learning_path_learning_path_with_user_information_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.LearningPathParticipation.LearningPathDetailWithUserInformation'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: pathId
                in: path
                description: 'Path id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 59
    '/users/{userId}/paths/{pathId}/attendance-certificate/{premiumId}':
        get:
            tags:
                - Reports
            summary: 'Get user path attendance-certificate '
            description: 'Get user path attendance-certificate '
            operationId: oc_api_get_attendance_certificate
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Web.Student.AttendanceCertificate.ShowAttendanceCertificate'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: pathId
                in: path
                description: 'Path id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 59
            -   name: premiumId
                in: path
                description: 'Premium id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/users/{userId}/paths/{pathId}/cirr-work-authorizations':
        get:
            tags:
                - CIRR Work Authorizations
            summary: "Gets the student work authorizations for a path"
            description: "Gets the student work authorizations for a path"
            operationId: oc_api_student_cirr_work_authorizations_get
            x-usecase: Student\CIRR\GetStudentCirrWorkAuthorizations
            parameters:
                -   name: userId
                    in: path
                    description: 'User ID'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 12345
                -   name: pathId
                    in: path
                    description: 'Path ID'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 59
            responses:
                200:
                    description: Success
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/Student.LearningPath.WorkAuthorizations'
                400:
                    description: Bad Request
                403:
                    description: The user is trying to fetch authorizations for another user
                404:
                    description: Either the user is not following the given path, or they haven't answered yet
                422:
                    description: The user created authorizations multiple times
            security:
                -   OAuth2: [ openclassrooms_client, current_user ]
        post:
            tags:
                - CIRR Work Authorizations
            summary: "Persists the student work authorizations for a path"
            description: "Persists the student work authorizations for a path"
            operationId: oc_api_student_cirr_work_authorizations_post
            x-usecase: Student\CIRR\CreateStudentCirrWorkAuthorizations
            parameters:
                -   name: userId
                    in: path
                    description: 'User ID'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 12345
                -   name: pathId
                    in: path
                    description: 'Path ID'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 59
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Student.LearningPath.WorkAuthorizations.Save'
            responses:
                201:
                    description: Created
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/Student.LearningPath.WorkAuthorizations'
                400:
                    description: Bad Request
                403:
                    description: The user is either trying to post for another user, or not following any path
                409:
                    description: The user already created authorizations
                422:
                    description: The user already created authorizations multiple times
            security:
                -   OAuth2: [ openclassrooms_client, current_user ]
        put:
            tags:
                - CIRR Work Authorizations
            summary: "Updates the student work authorizations for a path"
            description: "Updates the student work authorizations for a path"
            operationId: oc_api_student_cirr_work_authorizations_put
            x-usecase: Student\CIRR\EditStudentCirrWorkAuthorizations
            parameters:
                -   name: userId
                    in: path
                    description: 'User ID'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 12345
                -   name: pathId
                    in: path
                    description: 'Path ID'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 59
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Student.LearningPath.WorkAuthorizations.Save'
            responses:
                200:
                    description: OK
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/Student.LearningPath.WorkAuthorizations'
                400:
                    description: Bad Request
                403:
                    description: The user is trying to fetch authorizations for another user or another path
                404:
                    description: Authorizations not found
                422:
                    description: Several authorizations for one path found
            security:
                -   OAuth2: [ openclassrooms_client, current_user ]
    '/users/{userId}/paths/followed-path/cirr-status':
        get:
            tags:
                - CIRR
            summary: "Gets the current user's status to access path or Student Intent survey"
            description: "Gets the current user's status to access path or Student Intent survey"
            operationId: oc_api_student_cirr_status_get
            x-usecase: Student\CIRR\GetStudentCirrStatus
            parameters:
                -   name: userId
                    in: path
                    description: 'User ID'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 1111111
            responses:
                200:
                    description: OK
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/Student.Cirr.Status'
                401:
                    description: 'Invalid token'
                403:
                    description: 'Student is not following any learning path or is trying to fetch another user''s status'
                404:
                    description: 'Not found'
                422:
                    description: 'Unprocessable: several answers already exist'
            security:
                -   OAuth2: [ openclassrooms_client, current_user ]

    '/users/{userId}/paths/{pathId}/projects':
        get:
            tags:
                - LearningActivity
                - LearningPath
                - Project
            summary: 'Get user path projects'
            description: 'Get user path projects'
            operationId: oc_api_learning_activity_learning_path_projects_with_user_information_get
            responses:
                405:
                    description: '405'
                404:
                    description: 'Not found'
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.Project.ProjectList'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: pathId
                in: path
                description: 'Path id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 59

    '/users/{userId}/paths/{pathId}/goal-after-graduation':
        get:
            tags:
                - User
            summary: 'Get student goal after graduation'
            description: 'Get student goal after graduation on the current path'
            operationId: 'oc_api_student_goal_after_graduation_get'
            x-usecase: Student\GetStudentGoalAfterGraduation
            parameters:
                -   name: userId
                    in: path
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 12345
                    description: 'User ID'
                -   name: pathId
                    in: path
                    description: 'Path ID'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 59
            responses:
                200:
                    description: Success
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/Student.LearningPath.GoalAfterGraduation'
                400:
                    description: Bad Request
                403:
                    description: The user is trying to fetch goals for another user or another path
                404:
                    description: Goal not found
                422:
                    description: Several goals for the same followed path have been found
            security:
                -   OAuth2: [ openclassrooms_client, current_user ]
        post:
            tags:
                - User
            summary: 'Persists the student goal after graduation'
            description: 'Persists the Student Goal after Graduation on the current path'
            operationId: 'oc_api_student_goal_after_graduation_post'
            x-usecase: Student\CreateStudentGoalAfterGraduation
            parameters:
                -   name: userId
                    in: path
                    description: 'User ID'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 12345
                -   name: pathId
                    in: path
                    description: 'Path ID'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 59
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Student.LearningPath.GoalAfterGraduation.Save'
            responses:
                201:
                    description: Created
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/Student.LearningPath.GoalAfterGraduation'
                400:
                    description: Bad Request
                403:
                    description: The user is either trying to post for another user, or not following any path
                409:
                    description: Conflict
            security:
                -   OAuth2: [ openclassrooms_client, current_user ]
        put:
            tags:
                - User
            summary: 'Updates the student goal after graduation'
            description: 'Updates the Student Goal after Graduation on the current path'
            operationId: 'oc_api_student_goal_after_graduation_put'
            x-usecase: Student\EditStudentGoalAfterGraduation
            parameters:
                -   name: userId
                    in: path
                    description: 'User ID'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 12345
                -   name: pathId
                    in: path
                    description: 'Path ID'
                    required: true
                    schema:
                        format: int32
                        type: integer
                        nullable: false
                        example: 59
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Student.LearningPath.GoalAfterGraduation.Save'
            responses:
                200:
                    description: OK
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/Student.LearningPath.GoalAfterGraduation'
                400:
                    description: Bad Request
                403:
                    description: User is trying to fetch goals for another user or another path
                404:
                    description: Goal not found
                422:
                    description: Several goals for the same followed path have been found
            security:
                -   OAuth2: [ openclassrooms_client, current_user ]
    '/users/{userId}/phone-number':
        get:
            tags:
                - User
                - PhoneNumber
            summary: 'Get user phone-number'
            description: 'Get user phone-number'
            operationId: oc_api_user_phone_number_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User.PhoneNumber.PhoneNumberDetail'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        put:
            tags:
                - User
                - PhoneNumber
            summary: 'Put user phone-number'
            description: 'Put user phone-number'
            operationId: oc_api_user_phone_number_put
            responses:
                200:
                    description: Ok

                201:
                    description: Created

                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User.PhoneNumber.PutPhoneNumber'
    '/users/{userId}/privacy-settings':
        get:
            tags:
                - User
                - Privacy
            summary: 'Get user privacy-settings'
            description: 'Get user privacy-settings'
            operationId: oc_api_user_privacy_settings_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User.Privacy.PrivacySettingListItemViewModelCollection'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        patch:
            tags:
                - User
                - Privacy
            summary: 'Patch user privacy-settings'
            description: 'Patch user privacy-settings'
            operationId: oc_api_user_privacy_settings_patch
            responses:
                200:
                    description: Ok

                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/User.Privacy.PatchPrivacySetting'
    '/users/{userId}/projects/{projectId}':
        get:
            tags:
                - LearningActivity
                - Project
            summary: 'Get user project'
            description: 'Get user project'
            operationId: oc_api_learning_activity_project_project_with_user_information_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LearningActivity.Project.ProjectDetailWithUserInformation'
        parameters:
            -   name: projectId
                in: path
                description: 'Project id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/users/{userId}/projects/{projectId}/presentation-time-slots':
        get:
            tags:
                - Mentorship
                - Presentation
                - TimeSlot
            summary: 'Get user project presentation-time-slots'
            description: 'Get user project presentation-time-slots'
            operationId: oc_api_user_project_presentation_time_slots
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Mentorship.Presentation.TimeSlot.TimeSlotViewModelList'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: projectId
                in: path
                description: 'Project id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/users/{userId}/projects/{projectId}/presentations':
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: projectId
                in: path
                description: 'Project id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        post:
            tags:
                - Mentorship
                - Presentation
            summary: 'Post user project presentations'
            description: 'Post user project presentations'
            operationId: oc_api_user_presentation_post
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LearningActivity.Mentorship.MentorshipSession.MentorshipSession'
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Mentorship.Presentation.PostPresentationSession'
    '/users/{userId}/projects/{projectId}/project-sessions':
        get:
            tags:
                - LearningActivity
                - ProjectSession
            summary: 'Get user project project-sessions'
            description: 'Get user project project-sessions'
            operationId: oc_api_learning_activity_project_session_project_sessions_get
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/LearningActivity.ProjectSession.Impl.ProjectSessionList'
        parameters:
            -   name: projectId
                in: path
                description: 'Project id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345

    '/users/{userId}/recommended-paths':
        get:
            tags:
                - LearningActivity
                - Course
            summary: 'Get user recommended paths'
            description: 'Get user recommended learning paths'
            operationId: oc_api_user_recommended_learning_paths_get
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.LearningPath.Impl.LearningPathDetailImplCollection'
                206:
                    description: Partial Content
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.LearningPath.Impl.LearningPathDetailImplCollection'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345

    '/users/{userId}/recommended-courses':
        get:
            tags:
                - LearningActivity
                - Course
            summary: 'Get user recommended-courses'
            description: 'Get user recommended-courses'
            operationId: oc_api_user_recommended_courses_get
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Course.Course.CourseList'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
    '/users/{userId}/sessions':
        get:
            tags:
                - Session
            summary: 'Get user sessions'
            description: 'Get user sessions'
            operationId: oc_api_get_sessions
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Session.SessionList'
        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            -   name: 'life-cycle-status'
                in: query
                description: 'Filter sessions by life cycle status'
                required: false
                schema:
                    type: array
                    example: 'pending'
            -   name: 'actor'
                in: query
                description: 'Filter the sessions by actor to get those in which the user participated as a recipient or an expert'
                required: false
                schema:
                    type: string
                    example: 'recipient'
            -   name: 'type'
                in: query
                description: 'Filter sessions by type'
                required: false
                schema:
                    type: array
                    example: 'presentation'
            -   name: 'before'
                in: query
                description: 'Filter sessions before a given date'
                required: false
                schema:
                    format: date
                    type: string
                    example: '2021-01-01'
            -   name: 'after'
                in: query
                description: 'Filter sessions after a given date'
                required: false
                schema:
                    format: date
                    type: string
                    example: '2021-01-01'
    '/users/{userId}/supports':
        get:
            tags:
                - Support
            summary: 'Get user supports'
            description: 'Get user supports'
            operationId: oc_api_user_supports_get
            responses:
                200:
                    description: Ok

        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        post:
            tags:
                - User
                - Support
            summary: 'Post user supports'
            description: 'Post user supports'
            operationId: oc_api_user_support_recipient_period_post
            responses:
                201:
                    description: Created
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Support.SupportRecipientPeriodViewModelDetail'
                404:
                    description: 'Not found'

            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Support.PostSupportRecipientPeriod'
    '/users/{userId}/teams':
        get:
            tags:
                - Team
                - User
            summary: 'Get user teams'
            description: 'Get user teams'
            operationId: oc_api_user_team_get_all
            responses:
                404:
                    description: 'Not found'

                200:
                    description: Ok

        parameters:
            -   name: userId
                in: path
                description: 'User id'
                required: true
                schema:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        put:
            tags:
                - User
                - Team
            summary: 'Put user teams'
            description: 'Put user teams'
            operationId: oc_api_user_teams_edit
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/User.Team.UserTeamsRolesViewModelCollection'
                404:
                    description: 'Not found'

    '/users/{userId}/training-periods':
        post:
            operationId: oc_api_user_training_period_post
            x-usecase: Student\LearningPath\TrainingPeriod\CreateTrainingPeriod
            x-property-naming-strategy: snake_case
            parameters:
                -   name: userId
                    in: path
                    required: true
                    schema:
                        type: integer
                        example: 47
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Student.LearningPath.CreateTrainingPeriodRequest"
                        example:
                            learningPathId: 104
                            status: activated
                            startedAt: '2022-01-01T00:00:00Z'
                            endedAt: '2024-01-01T00:00:00Z'
                            metadata:
                                financialAid:
                                    amount: 2000
                                    signedDate: '2022-01-01T00:00:00Z'
                                    customPathDuration: 200
                                    expectedPathCompletion: 100
                                    fileNumber: 19ENA04005061
                                    invoiceNumber: 28 66 18 18 037
                                    submissionDate: '2022-01-01T00:00:00Z'
                                    backers: [ test ]
                description: Training period data
                required: true
            responses:
                "201":
                    description: created
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/Student.LearningPath.CreateTrainingPeriodResponse"
                "400":
                    description: bad request
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
                "403":
                    description: scope access denied
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
                "404":
                    description: user not found
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
                "409":
                    description: date overlap
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
                "422":
                    description: learning path not found
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
            security:
                -   OAuth2: [ admin_student ]
    "/users/{userId}/training-periods/{ulid}":
        patch:
            operationId: oc_api_user_training_period_patch
            x-usecase: Student\LearningPath\TrainingPeriod\EditTrainingPeriod
            x-property-naming-strategy: snake_case
            parameters:
                -   name: userId
                    in: path
                    required: true
                    schema:
                        type: integer
                -   name: ulid
                    in: path
                    required: true
                    schema:
                        type: string
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/Student.LearningPath.EditTrainingPeriodRequest"
                description: Training period data
                required: true
            responses:
                "200":
                    description: edited
                "400":
                    description: bad request
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
                "403":
                    description: scope access denied
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
                "404":
                    description: user not found
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
                "409":
                    description: date overlap
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
                "422":
                    description: learning path not found
                    content:
                        text/json:
                            schema:
                                $ref: '#/components/schemas/ApiError'
            security:
                -   OAuth2:
                        - admin_student
    /video-conference-connection/check:
        get:
            tags:
                - VideoConference
            summary: 'Get video-conference-connection check'
            description: 'Get video-conference-connection check'
            operationId: oc_api_video_conference_connection_check
            responses:
                200:
                    description: Ok

    '/video-conferences':
        post:
            tags: [ VideoConference, LearningActivity ]
            summary: 'Create a new Video conference'
            description: 'Create a new Video conference'
            operationId: oc_api_video_conferences_post
            x-usecase: OC\BusinessRules\UseCases\VideoConference\CreateVideoConference
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: "#/components/schemas/VideoConference.PostVideoConferenceModel"
            responses:
                200:
                    description: OK
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/VideoConference.VideoConferenceDetailViewModel"
                400:
                    description: 'Bad request'
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
                409:
                    description: 'Conflict'
                    content:
                        text/json:
                            schema:
                                $ref: "#/components/schemas/ApiError"
            security:
                -   OAuth2: [ user_learning_activity ]

    '/video-conferences/{videoConferenceIdentifier}':
        get:
            tags:
                - VideoConference
            summary: 'Get video-conference'
            description: 'Get video-conference'
            operationId: oc_api_video_conference_get
            responses:
                200:
                    description: Ok
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/VideoConference.VideoConferenceDetailViewModel'
        parameters:
            -   name: videoConferenceIdentifier
                in: path
                description: 'VideoConferenceIdentifier is the slug if it exists otherwise it is the id'
                required: true
                schema:
                    type: string
                    nullable: false
                    example: 'lorem-Ipsum or fr43hfg7dfig'
    '/video-conferences/{videoConferenceId}/records':
        get:
            tags:
                - VideoConference
            summary: 'Get video-conference records'
            description: 'Get video-conference records'
            operationId: oc_api_video_conference_records_get
            responses:
                200:
                    description: Ok

        parameters:
            -   name: videoConferenceId
                in: path
                description: 'VideoConference id'
                required: true
                schema:
                    type: string
                    nullable: false
                    example: 'dgzersdfvrt'
    '/video-conferences/{videoConferenceId}/start-recording':
        parameters:
            -   name: videoConferenceId
                in: path
                description: 'VideoConference id'
                required: true
                schema:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        post:
            tags:
                - VideoConference
            summary: 'Post video-conference start-recording'
            description: 'Post video-conference start-recording'
            operationId: oc_api_start_video_conference_recording
            responses:
                200:
                    description: Ok

    '/video-conferences/{videoConferenceId}/stop-recording':
        parameters:
            -   name: videoConferenceId
                in: path
                description: 'VideoConference id'
                required: true
                schema:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        post:
            tags:
                - VideoConference
            summary: 'Post video-conference stop-recording'
            description: 'Post video-conference stop-recording'
            operationId: oc_api_stop_video_conference_recording
            responses:
                200:
                    description: Ok

    /webhooks/opentok/archiving:
        post:
            tags:
                - VideoConference
                - Webhook
                - Opentok
            summary: 'Post webhooks opentok archiving'
            description: 'Post webhooks opentok archiving'
            operationId: oc_webhooks_opentok_archiving
            responses:
                200:
                    description: Ok

    /webhooks/opentok/session-monitoring:
        post:
            tags:
                - VideoConference
                - Webhook
                - Opentok
            summary: 'Post webhooks opentok session-monitoring'
            description: 'Post webhooks opentok session-monitoring'
            operationId: oc_webhooks_opentok_session_monitoring
            responses:
                200:
                    description: Ok

components:
    schemas:
        Calendar.Availability.AvailabilityViewModelDetail:
            type: object
            properties:
                availabilityId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                endDate:
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                    format: date-time
                recurrence:
                    type: array
                    nullable: false
                    example: 'Lorem Ipsum'
                    items:
                        type: string
                        nullable: false
                        example: ''
                startDate:
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                    format: date-time
        Analytic.AnalyticViewModel:
            type: object
            properties:
                analyticItems:
                    type: array
                    items:
                        $ref: '#/components/schemas/Analytic.AnalyticItemViewModel'
        Organization.User.OrganizationRoleViewModelList:
            type: array
            items:
                $ref: '#/components/schemas/Organization.User.OrganizationRoleViewModelListItem'
        Organization.User.OrganizationRoleViewModelListItem:
            type: object
            properties:
                endedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-10-06T18:51:01+02:00
                name:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                startedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-10-06T18:51:01+02:00
                role:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Security.AuthenticationSchemes.UserAuthenticationSchemeViewModel:
            type: object
            properties:
                identifier:
                    type: string
                    nullable: false
                    example: john.doe@example.com
                scheme:
                    type: string
                    nullable: false
                    example: password
                    enum:
                        - password
                        - SAML
        Team.User.TeamUserCollection:
            type: array
            items:
                $ref: '#/components/schemas/Team.User.TeamUser'
        Team.User.TeamUser:
            type: object
            properties:
                displayableName:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                profilePicture:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                roles:
                    type: array
                    nullable: false
                userId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        Team.User.TeamUserRolesViewModelCollection:
            type: array
            items:
                $ref: '#/components/schemas/Team.User.TeamUserRolesViewModel'
        Team.User.TeamUserRolesViewModel:
            type: object
            properties:
                endedAt:
                    format: date-time
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:30+02:00
                startedAt:
                    format: date-time
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:30+02:00
                name:
                    type: string
                    nullable: true
                    example: 'team-manager'
        User.Team.UserTeamsRolesViewModelCollection:
            type: array
            items:
                $ref: '#/components/schemas/User.Team.UserTeamsRolesViewModel'
        User.Team.UserTeamsRolesViewModel:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                roles:
                    type: array
                    nullable: false
        VideoConference.PostVideoConferenceModel:
            type: object
            additionalProperties: false
            properties:
                recordingStatus:
                    type: string
                    nullable: false
                    example: 'unrecorded / recorded'
                recordingReason:
                    type: string
                    nullable: true
                    example: 'enter the reason why it need to be recorded or null if recording_status is unrecorded'
                slug:
                    type: string
                    nullable: true
                    example: 'lorem-ipsum'
                title:
                    type: string
                    nullable: true
                    example: 'Lorem Ipsum'
            required:
                - recordingStatus
        VideoConference.VideoConferenceDetailViewModel:
            type: object
            properties:
                id:
                    type: string
                    nullable: false
                    example: 'fr43hfg7dfig'
                title:
                    type: string
                    nullable: true
                    example: 'Lorem Ipsum'
                slug:
                    type: string
                    nullable: true
                    example: 'lorem-ipsum'
                videoConferenceConnection:
                    $ref: '#/components/schemas/VideoConference.VideoConferenceConnectionViewModel'
                recordingStatus:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                recordingReason:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Analytic.AnalyticItemViewModel:
            type: object
            properties:
                code:
                    type: string
                    nullable: false
                    example: PATHS
                data:
                    type: array
                    nullable: false
                    items:
                        type: string
                        example: ''
                filters:
                    type: object
                    nullable: false
                    additionalProperties:
                        type: string
                    example:
                        learningPathIds:
                            - 56
                            - 65
                groupBy:
                    type: array
                    nullable: false
                    items:
                        type: string
                        example: ''
                name:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                orderBy:
                    type: array
                    nullable: false
                    items:
                        type: string
                        example: ''
                pagination:
                    type: string
                    nullable: false
                    example: 1-10
        VideoConference.VideoConferenceConnectionViewModel:
            type: object
            nullable: true
            properties:
                openTokSessionId:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                openTokUserToken:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Calendar.Availability.PatchAvailability:
            type: object
            required:
                - startDate
                - endDate
            properties:
                startDate:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                endDate:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                recurrence:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Invitation.InvitationModel:
            type: object
            required:
                - emails
            properties:
                emails:
                    type: array
                    items:
                        type: string
                        nullable: false
                        example: 'Lorem Ipsum'
        Organization.User.PatchOrganizationUserRolesModel:
            type: object
            required:
                - organizationUserRoleModels
            properties:
                organizationUserRoleModels:
                    type: array
                    items:
                        $ref: '#/components/schemas/Organization.User.OrganizationUserRoleModel'
        Organization.User.OrganizationUserRoleModel:
            type: object
            properties:
                endedAt:
                    format: date-time
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:30+02:00
                startedAt:
                    format: date-time
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:30+02:00
                name:
                    type: string
                    nullable: true
                    example: 'ORGANIZATION_ADMINISTRATOR'
        Organization.Team.User.TeamUserRole:
            type: object
            required:
                - roles
            properties:
                roles:
                    type: array
                    nullable: false
        Organization.Team.TeamRoles:
            type: object
            required:
                - id
                - roles
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                roles:
                    type: array
                    items:
                        type: string
                        nullable: false
                        example: 'Lorem Ipsum'
        Calendar.Availability.AvailabilityViewModelList:
            type: array
            items:
                $ref: '#/components/schemas/Calendar.Availability.AvailabilityViewModelListItem'
        Calendar.Availability.AvailabilityViewModelListItem:
            type: object
            properties:
                availabilityId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                endDate:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                recurrence:
                    type: array
                    items:
                        type: string
                        nullable: false
                        example: ''
                startDate:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
        Calendar.Event.EventViewModelList:
            type: array
            items:
                $ref: '#/components/schemas/Calendar.Event.EventViewModelListItem'
        Calendar.Event.EventViewModelListItem:
            type: object
            properties:
                attendees:
                    type: array
                    items:
                        $ref: '#/components/schemas/User.UserViewModel'
                endDate:
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+02:00
                    format: date-time
                id:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                startDate:
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+02:00
                    format: date-time
                title:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                type:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Course.Course.CourseList:
            type: array
            items:
                $ref: '#/components/schemas/Course.Course.CourseDetail'
        Invitation.GetInvitationResponse:
            type: object
            additionalProperties: false
            properties:
                id:
                    type: integer
                    format: int32
                    nullable: false
                    example: 12345
                email:
                    type: string
                    nullable: false
                    example: 'zozor@openclassrooms.lan'
                organizationName:
                    type: string
                    nullable: true
                    example: "OpenClassrooms"
                teamName:
                    type: string
                    nullable: true
                    example: "OC Team"
        LearningActivity.Mentorship.MentorshipSession.MentorshipSession:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                mentorDisplayableName:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                mentorSlug:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                mentorId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                mentorProfilePicture:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                sessionDate:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                mentorslug:
                    type: string
                    nullable: false
                    example: resource-slug
        Mentorship.Presentation.TimeSlot.TimeSlotViewModelList:
            type: array
            items:
                $ref: '#/components/schemas/Mentorship.Presentation.TimeSlot.TimeSlotViewModelListItem'
        Mentorship.Presentation.TimeSlot.TimeSlotViewModelListItem:
            type: object
            properties:
                duration:
                    type: string
                    nullable: false
                    example: P12M
                id:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                startDate:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
        Organization.OrganizationViewModel:
            type: object
            properties:
                createdAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                description:
                    type: string
                    nullable: true
                    example: 'Lorem Ipsum'
                id:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                language:
                    type: string
                    nullable: false
                    example: 'fr'
                logo:
                    type: string
                    nullable: true
                    example: 'Lorem Ipsum'
                name:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                updatedAt:
                    format: date-time
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:29+02:00
        Organization.OrganizationViewModelList:
            type: array
            items:
                $ref: '#/components/schemas/Organization.OrganizationViewModelListItem'
        Organization.OrganizationViewModelListItem:
            type: object
            properties:
                createdAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                description:
                    type: string
                    nullable: true
                    example: 'Lorem Ipsum'
                id:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                language:
                    type: string
                    nullable: false
                    example: 'fr'
                logo:
                    type: string
                    nullable: true
                    example: 'Lorem Ipsum'
                name:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                updatedAt:
                    format: date-time
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:29+02:00
        Organization.OrganizationViewModelDetail:
            type: object
            properties:
                createdAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                description:
                    type: string
                    nullable: true
                    example: 'Lorem Ipsum'
                id:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                locale:
                    type: string
                    nullable: false
                    example: 'fr'
                logo:
                    type: string
                    nullable: true
                    example: 'Lorem Ipsum'
                name:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                updatedAt:
                    format: date-time
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:29+02:00
        Team.TeamViewModelList:
            type: array
            items:
                $ref: '#/components/schemas/Team.TeamViewModelListItem'
        Team.TeamViewModelListItem:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                language:
                    type: string
                    nullable: false
                    example: fr
                name:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                totalOfMembers:
                    type: integer
                    nullable: false
                    example: 6
                totalOfPendingInvitations:
                    type: integer
                    nullable: false
                    example: 10
                description:
                    type: string
                    nullable: true
                    example: 'Lorem Ipsum'
                organizationId:
                    type: string
                    nullable: false
                    example: 'f7gm18rh'
                supervisors:
                    type: array
                    items:
                        $ref: '#/components/schemas/Team.SupervisorsModelListItem'
        Team.SupervisorsModelListItem:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                firstName:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                lastName:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                displayName:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                profilePicture:
                    type: string
                    nullable: false
                    example: 'https://openclassrooms.lan/bundles/common/images/avatar_defaut.png'
        Team.TeamViewModelDetail:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                locale:
                    type: string
                    nullable: false
                    example: fr
                name:
                    type: string
                    nullable: false
                    example: 'Name of the team'
                disclaimer:
                    type: string
                    nullable: false
                    example: '<h2>Bonjour et bienvenue sur la plateforme OpenClassrooms !</h2>'
        Organization.User.OrganizationUserViewModelList:
            type: array
            items:
                $ref: '#/components/schemas/Organization.User.OrganizationUserViewModelListItem'
        Organization.User.OrganizationUserViewModelListItem:
            type: object
            properties:
                displayableName:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                email:
                    type: string
                    nullable: false
                    example: john.doe@openclassrooms.lan
                firstName:
                    type: string
                    nullable: false
                    example: John
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                lastName:
                    type: string
                    nullable: false
                    example: Doe
                profilePicture:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                roles:
                    type: array
                    items:
                        $ref: '#/components/schemas/OC.BusinessRules.Responders.Organization.User.OrganizationRoleListItemResponse'
                teams:
                    type: array
                    items:
                        $ref: '#/components/schemas/User.Team.UserTeamViewModelListItem'
        Organization.User.OrganizationUserViewModelDetail:
            type: object
            properties:
                displayableName:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                email:
                    type: string
                    nullable: false
                    example: john.doe@openclassrooms.lan
                firstName:
                    type: string
                    nullable: false
                    example: John
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                lastName:
                    type: string
                    nullable: false
                    example: Doe
                profilePicture:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                roles:
                    type: array
                    items:
                        $ref: '#/components/schemas/OC.BusinessRules.Responders.Organization.User.OrganizationRoleListItemResponse'
                teams:
                    type: array
                    items:
                        $ref: '#/components/schemas/User.Team.UserTeamViewModelListItem'
        User.ExpectedBenefits.UserExpectedBenefitViewModelCollection:
            type: array
            items:
                $ref: '#/components/schemas/User.ExpectedBenefits.UserExpectedBenefitViewModel'
        User.ExpectedBenefits.UserExpectedBenefitViewModel:
            type: object
            properties:
                comment:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                id:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        User.Privacy.PrivacySettingListItemViewModelCollection:
            type: array
            items:
                $ref: '#/components/schemas/User.Privacy.PrivacySettingListItemViewModel'
        User.Privacy.PrivacySettingListItemViewModel:
            type: object
            properties:
                type:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                updatedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                value:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        FinancialAid.FundingMechanism.FundingMechanismListItemViewModelCollection:
            type: array
            items:
                $ref: '#/components/schemas/FinancialAid.FundingMechanism.FundingMechanismListItemViewModel'
        FinancialAid.FundingMechanism.FundingMechanismListItemViewModel:
            type: object
            properties:
                country:
                    type: string
                    nullable: false
                    example: FR
                eligibleCountries:
                    type: array
                    items:
                        type: string
                        nullable: false
                        example: '["FR","GP","BL"]'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                name:
                    type: string
                    nullable: false
                    example: 'Compte Personel de Formation'
                shortName:
                    type: string
                    nullable: false
                    example: CPF
                type:
                    type: string
                    nullable: false
                    example: scholarship
        Product.OfferListItemViewModelCollection:
            type: array
            items:
                $ref: '#/components/schemas/Product.OfferListItemViewModel'
        Product.OfferListItemViewModel:
            type: object
            properties:
                charges:
                    type: array
                    items:
                        $ref: '#/components/schemas/OC.BusinessRules.Entities.Product.RecurringCharge'
                fundingMechanism:
                    $ref: '#/components/schemas/OC.BusinessRules.Entities.FinancialAid.FundingMechanism.FundingMechanism'
                id:
                    type: string
                    nullable: false
                    example: path-185-funded-21
                product:
                    $ref: '#/components/schemas/OC.BusinessRules.Entities.Product.Product'
        LearningActivity.Course.Chapter.ChapterWithUserInformation:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                OpenClassroomsUrl:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                title:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                learningActivityStatus:
                    type: boolean
                    nullable: false
                    example: true
        LearningActivity.Jury.PostJurySessionModel:
            type: object
            additionalProperties: false
            properties:
                jurySessionDate:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2021-10-30T17:45:00+200
                jurySignatoryId:
                    format: int32
                    type: integer
                    nullable: true
                    example: 12345
                learningPathId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
            required:
                - jurySessionDate
                - learningPathId
        LearningActivity.Jury.JurySessionList:
            type: array
            items:
                $ref: '#/components/schemas/LearningActivity.Jury.JurySessionListItemViewModel'
        LearningActivity.Jury.JurySessionListItemViewModel:
            type: object
            properties:
                jurySessionDate:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                jurySignatory:
                    type: object
                    nullable: true
                    properties:
                        id:
                            format: int32
                            type: integer
                            nullable: false
                            example: 12345
                        displayName:
                            type: string
                            nullable: false
                            example: 'Lorem Ipsum'
                        positionTitle:
                            type: string
                            nullable: false
                            example: 'Lorem Ipsum'
                learningPath:
                    type: object
                    nullable: false
                    properties:
                        id:
                            format: int32
                            type: integer
                            nullable: false
                            example: 12345
                        locale:
                            type: string
                            nullable: false
                            example: 'Lorem Ipsum'
                        title:
                            type: string
                            nullable: false
                            example: 'Lorem Ipsum'
        Course.CourseParticipation.CourseWithUserInformation.CourseDetailWithUserInformation:
            allOf:
                -   $ref: '#/components/schemas/Course.Course.CourseDetail'
                -   type: object
                    properties:
                        courseFollowedAt:
                            format: date-time
                            type: string
                            nullable: false
                            example: 2020-09-15T17:15:29+00:00
                        lastCourseActivityDate:
                            format: date-time
                            type: string
                            nullable: false
                            example: 2020-09-15T17:15:29+00:00
                        learningActivityStatus:
                            type: string
                            nullable: false
                            example: 'Lorem Ipsum'
                        userCourseCompletionRate:
                            format: float
                            type: number
                            nullable: true
                            example: '0.85'
                        userHasFollowedCourse:
                            type: boolean
                            nullable: false
                            example: true
                        userIsCertified:
                            type: boolean
                            nullable: false
                            example: true
                        userIsFollowingCourse:
                            type: boolean
                            nullable: false
                            example: true
                        userActivityTrend:
                            type: string
                            nullable: false
                            example: 'Lorem Ipsum'
        Course.CourseParticipation.CourseWithUserInformation.CourseDetailWithUserInformationCollection:
            type: array
            items:
                $ref: '#/components/schemas/Course.CourseParticipation.CourseWithUserInformation.CourseDetailWithUserInformation'
        Course.SkillParticipation.SkillListItemWithUserInformationCollection:
            type: array
            items:
                $ref: '#/components/schemas/Course.SkillParticipation.SkillListItemWithUserInformation'
        Course.SkillParticipation.SkillListItemWithUserInformation:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                language:
                    type: string
                    nullable: false
                    example: fr
                name:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                locale:
                    type: string
                    nullable: false
                    example: fr
        Course.CourseParticipation.Toc.CourseItemWithUserInformation:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                title:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                type:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                learningActivityStatus:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                score:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                slug:
                    type: string
                    nullable: false
                    example: resource-slug
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/Course.CourseParticipation.Toc.TocItemWithUserInformation'
        Course.LearningPathParticipation.LearningPathDetailWithUserInformation:
            allOf:
                -   $ref: '#/components/schemas/Course.LearningPath.Impl.LearningPathDetailImpl'
                -   type: object
                    properties:
                        userCanReEnroll:
                            type: boolean
                            nullable: false
                            example: true
                        userIsFollowingLearningPath:
                            type: boolean
                            nullable: false
                            example: true
                        userLearningInformation:
                            $ref: '#/components/schemas/LearningActivity.User.UserLearningInformationViewModel'
        Course.LearningPathParticipation.LearningPathListItemWithUserInformationCollection:
            type: array
            items:
                $ref: '#/components/schemas/Course.LearningPathParticipation.LearningPathListItemWithUserInformation'
        Course.LearningPathParticipation.LearningPathListItemWithUserInformation:
            allOf:
                -   $ref: '#/components/schemas/Course.LearningPath.Impl.LearningPathDetailImpl'
                -   type: object
                    properties:
                        completion:
                            $ref: '#/components/schemas/LearningActivity.LearningPath.LearningPathCompletionViewModel'
                        userCanReEnroll:
                            type: boolean
                            nullable: false
                            example: true
                        userIsFollowingLearningPath:
                            type: boolean
                            nullable: false
                            example: true
                        userLearningInformation:
                            $ref: '#/components/schemas/LearningActivity.User.UserLearningInformationViewModel'
        Course.Project.ProjectList:
            type: array
            items:
                $ref: '#/components/schemas/Course.Project.ProjectListItem'
        Course.Project.ProjectListItem:
            type: object
            properties:
                createdAt:
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+02:00
                    format: date-time
                duration:
                    type: string
                    nullable: false
                    example: P12M
                evaluatorType:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                illustration:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                isStudentDeliverable:
                    type: boolean
                    nullable: false
                    example: true
                language:
                    type: string
                    nullable: false
                    example: fr
                lifecycleStatus:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                requiredPresentation:
                    type: boolean
                    nullable: false
                    example: true
                shortDescription:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                title:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                updatedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                url:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        LearningActivity.ProjectSession.ProjectSession:
            type: object
            properties:
                canceledAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                comment:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                defenseVideoUrl:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                filesUrls:
                    type: array
                    items:
                        type: string
                        nullable: false
                        example: 'Lorem Ipsum'
                fileType:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                learningActivityStatus:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                presentationId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                project:
                    $ref: '#/components/schemas/Course.Project.ProjectDetail'
                reviewedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                signedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                startedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                user:
                    $ref: '#/components/schemas/User.UserViewModel'
                validator:
                    $ref: '#/components/schemas/User.UserViewModel'
        LearningActivity.ProjectSession.MarkProjectAsReadyForReviewViewModel:
            type: object
            properties:
                learningActivityStatus:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                readyForReviewAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
        LearningActivity.ProjectSession.Impl.ProjectSessionList:
            type: array
            items:
                $ref: '#/components/schemas/LearningActivity.ProjectSession.Impl.ProjectSessionListItem'
        LearningActivity.ProjectSession.Impl.ProjectSessionListItem:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                reviewedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                learningActivityStatus:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        LearningActivity.Project.ProjectDetailWithUserInformation:
            type: object
            properties:
                createdAt:
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+02:00
                    format: date-time
                duration:
                    type: string
                    nullable: false
                    example: P12M
                evaluatorType:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                illustration:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                isStudentDeliverable:
                    type: boolean
                    nullable: false
                    example: true
                language:
                    type: string
                    nullable: false
                    example: fr
                lifecycleStatus:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                requiredPresentation:
                    type: boolean
                    nullable: false
                    example: true
                shortDescription:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                title:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                updatedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                url:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                assessmentGuidelines:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                assignment:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                completion:
                    format: float
                    type: number
                    nullable: false
                    example: '0.85'
                followedStatus:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                learningActivityStatus:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                reviewedAt:
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+02:00
                    format: date-time
        Course.Chapter.Chapter:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 1604791
                OpenClassroomsUrl:
                    type: string
                    nullable: false
                    example: 'https://stage.openclassrooms.lan/fr/courses/1603881-apprenez-a-creer-votre-site-web-avec-html5-et-css3/1604791-inserez-des-images'
                title:
                    type: string
                    nullable: false
                    example: 'Insérez des images'
        Course.Course.CourseDetail:
            type: object
            properties:
                OpenClassroomsUrl:
                    type: string
                    nullable: false
                    example: 'https://openclassrooms.lan/fr/courses/4929676-redigez-des-ecrits-professionnels'
                category:
                    $ref: '#/components/schemas/Course.Category.Category'
                difficulty:
                    type: string
                    nullable: false
                    example: 'Easy'
                displayDifficulty:
                    type: string
                    nullable: false
                    example: 'Facile'
                duration:
                    type: string
                    nullable: false
                    example: PT4H
                hasAcademicCredits:
                    type: boolean
                    nullable: false
                    example: false
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 4929676
                illustration:
                    type: string
                    nullable: false
                    example: 'https://course.oc-static.com/courses/4929676/4929676_teaser_picture_1604430443.jpg%3Fr%3Dpad'
                isCertifying:
                    type: boolean
                    nullable: false
                    example: true
                isSinglePage:
                    type: boolean
                    nullable: false
                    example: true
                isVideoBased:
                    type: boolean
                    nullable: false
                    example: true
                language:
                    type: string
                    nullable: false
                    example: fr
                license:
                    type: string
                    nullable: false
                    example: 'CC-BY-SA'
                openedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                publishedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                prerequisite:
                    type: string
                    nullable: false
                    example: null
                shortDescription:
                    type: string
                    nullable: false
                    example: 'Beaucoup de choses passent par l''écrit dans le monde professionnel. Quel que soit votre métier, si vous voulez maîtriser la rédaction d''un écrit de la structuration à la relecture, ce cours vous sera utile !'
                slug:
                    type: string
                    nullable: false
                    example: 'redigez-des-ecrits-professionnels'
                status:
                    type: string
                    nullable: false
                    example: 'active'
                teaser:
                    type: string
                    nullable: false
                    example: 'https://vimeo.com/256607984'
                title:
                    type: string
                    nullable: false
                    example: 'Rédigez des écrits professionnels '
                updatedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                authors:
                    type: array
                    items:
                        $ref: '#/components/schemas/Course.Author.Author'
                backerPartners:
                    type: array
                    items:
                        $ref: '#/components/schemas/Course.Partner.PartnerBacker'
                creatorPartners:
                    type: array
                    items:
                        $ref: '#/components/schemas/Course.Partner.PartnerCreator'
        LearningContent.Content.ContentResourceCollection:
            type: array
            items:
                $ref: '#/components/schemas/LearningContent.Content.ContentResource'
        LearningContent.Content.ContentResource:
            type: object
            properties:
                description:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                mediaSources:
                    type: array
                    items:
                        $ref: '#/components/schemas/Media.MediaSource'
                mediaSourcesToDownload:
                    type: array
                    items:
                        $ref: '#/components/schemas/Media.MediaSource'
                name:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                type:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                url:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        Course.Skill.SkillList:
            type: array
            items:
                $ref: '#/components/schemas/Course.Skill.SkillListItem'
        Course.Skill.SkillListItem:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                language:
                    type: string
                    nullable: false
                    example: en
                name:
                    type: string
                    nullable: false
                    example: 'Build an app using persistent data storage, local notifications, and 3rd party libraries'
        Exercise.Toc.CourseItemWithExercises:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                title:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                type: {}
                children:
                    type: array
                    items:
                        $ref: '#/components/schemas/Exercise.Toc.TocItem'
                slug:
                    type: string
                    nullable: false
                    example: resource-slug
        Course.CourseCollection.CourseCollectionCollection:
            type: array
            items:
                $ref: '#/components/schemas/Course.CourseCollection.CourseCollection'
        Course.CourseCollection.CourseCollection:
            type: object
            properties:
                isCertified:
                    type: boolean
                    nullable: false
                    example: true
                createdAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                shortDescription:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                duration:
                    type: string
                    nullable: false
                    example: P12M
                gradientColorFrom:
                    type: string
                    nullable: false
                    example: '#77b4b4'
                gradientColorTo:
                    type: string
                    nullable: false
                    example: '#77b4b4'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                illustration:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                locale:
                    type: string
                    nullable: false
                    example: fr
                slug:
                    type: string
                    nullable: false
                    example: resource-slug
                status:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                title:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                updatedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
        Course.LearningPath.Impl.LearningPathDetailImplCollection:
            type: array
            items:
                $ref: '#/components/schemas/Course.LearningPath.Impl.LearningPathDetailImpl'
        Course.LearningPath.Impl.LearningPathDetailImpl:
            type: object
            properties:
                category:
                    $ref: '#/components/schemas/Course.Category.Category'
                certifications:
                    type: array
                    items:
                        $ref: '#/components/schemas/Course.Certification.Certification.Certification'
                duration:
                    type: string
                    nullable: false
                    example: 'P12M'
                format:
                    type: string
                    nullable: false
                    example: 'path'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 206
                illustration:
                    type: string
                    nullable: false
                    example: 'https://static.oc-static.com/prod/images/paths/illustrations/206/1599584273811_DEV_PYTHON.png'
                language:
                    type: string
                    nullable: false
                    example: en
                OpenClassroomsUrl:
                    type: string
                    nullable: false
                    example: 'https://openclassrooms.lan/fr/paths/206-python-developer'
                openedAt:
                    type: string
                    nullable: false
                    example: 2020-09-23T16:01:22+0200
                    format: date-time
                projectsDuration:
                    type: string
                    nullable: false
                    example: 'PT800H'
                releaseSeason:
                    type: string
                    nullable: false
                    example: null
                releaseYear:
                    type: string
                    nullable: false
                    example: null
                shortDescription:
                    type: string
                    nullable: false
                    example: 'Build powerful web applications using the popular programming language, Python, and the Django framework.'
                status:
                    type: string
                    nullable: false
                    example: 'active'
                title:
                    type: string
                    nullable: false
                    example: 'Python Developer'
                fundingMechanisms:
                    type: array
                    items:
                        $ref: '#/components/schemas/FinancialAid.FundingMechanism.FundingMechanismListItemViewModel'
                longDescription:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Course.LearningPath.LearningPathDetailCollection:
            type: array
            items:
                $ref: '#/components/schemas/Course.LearningPath.LearningPathDetail'
        Course.LearningPath.LearningPathDetail:
            type: object
            properties:
                category:
                    $ref: '#/components/schemas/Course.Category.Category'
                certifications:
                    type: array
                    items:
                        $ref: '#/components/schemas/Course.Certification.Certification.Certification'
                duration:
                    type: string
                    nullable: false
                    example: 'P12M'
                format:
                    type: string
                    nullable: false
                    example: 'path'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 206
                illustration:
                    type: string
                    nullable: false
                    example: 'https://static.oc-static.com/prod/images/paths/illustrations/206/1599584273811_DEV_PYTHON.png'
                language:
                    type: string
                    nullable: false
                    example: en
                OpenClassroomsUrl:
                    type: string
                    nullable: false
                    example: 'https://openclassrooms.lan/fr/paths/206-python-developer'
                openedAt:
                    type: string
                    nullable: false
                    example: 2020-09-23T16:01:22+0200
                    format: date-time
                projectsDuration:
                    type: string
                    nullable: false
                    example: 'PT800H'
                releaseSeason:
                    type: string
                    nullable: false
                    example: null
                releaseYear:
                    type: string
                    nullable: false
                    example: null
                shortDescription:
                    type: string
                    nullable: false
                    example: 'Build powerful web applications using the popular programming language, Python, and the Django framework.'
                status:
                    type: string
                    nullable: false
                    example: 'active'
                title:
                    type: string
                    nullable: false
                    example: 'Python Developer'
                fundingMechanisms:
                    type: array
                    items:
                        $ref: '#/components/schemas/FinancialAid.FundingMechanism.FundingMechanismListItemViewModel'
                longDescription:
                    type: string
                    nullable: false
                    example: 'WHAT DO PYTHON DEVELOPERS DO?\n\nPython developers are in charge of creating software using the Python\nprogramming language. They are generally focused on the back end of\nwebsites or applications, i.e., the architecture, unlike front-end\ndevelopers, who manage the visual aspects. \n\nA Python developer’s role includes:\n\n \t* DESIGNING programs to function as clients need them to.\n \t* Using CRITICAL THINKING and CREATIVITY as you code.\n \t* Identifying and implementing optimal TOOLS for building or\nenhancing powerful, modular applications.\n \t* Using TESTS to monitor applications and ensure the highest quality\nservice.\n \t* Providing technical and functional DOCUMENTATION of an application\nfor clients and colleagues.\n \t* STAYING UP-TO-DATE with quickly evolving technologies - developers\nare lifelong learners!\n\nWHY COMPLETE THIS TRAINING?\n\nThe number of software developer jobs is projected to grow by over 20%\nfrom 2018 to 2028 due to unprecedented growth in the tech sector\n(source: US BLS\n[https://www.bls.gov/ooh/computer-and-information-technology/software-developers.htm]).\nIn particular, Python programming is one of the most in-demand skills\nin the current job market.\n\nHere at OpenClassrooms, our mission is to make education accessible.\nOpenClassrooms [/en/about-us] is a global online\neducation-to-employment platform, designed to teach the skills needed\nfor the most in-demand jobs. We pinpoint the key skills needed to\nsucceed in the job market and create world-class online programs to\ntrain our students on those skills. \n\nThat’s why we''ve developed this 12-month bachelor-level diploma in\nPython development, which you can complete entirely online with the\nhelp of a dedicated mentor.\n\nThis training was designed and created by our learning design team in\ncollaboration with a committee of Python experts. It consists of 13\nprojects of increasing complexity. Each project is based on a concrete\nscenario from the professional world and will allow you to acquire\nspecific skills. Your mission: find solutions, produce professional\ndeliverables, and present them convincingly to a mentor. You will be\nable to directly apply your experience to the workplace.\n\nWHAT YOU WILL LEARN\n\nBy completing this path, you will develop the following Python\ndeveloper competencies:\n\n \t* Set up your development environment using VIRTUAL ENVIRONMENTS and\nPYCHARM.\n \t* Create web applications using the DJANGO and DJANGO REST\nframeworks.\n \t* Develop a secure POSTGRESQL database.\n \t* Enhance applications with TESTING, DEBUGGING, and REFACTORING.\n \t* Use technologies like GITHUB, POSTMAN, HTML, CSS, JAVASCRIPT, and\nCIRCLECI.\n\n...and much more!\n\nAt the end of this training, you will have a portfolio of professional\nprojects and earn your European diploma for software development.\n\nSALARY OF A PYTHON DEVELOPER\n\nSoftware development can be a lucrative career as many opportunities\nbecome available the more you gain experience. Here are average\nsalaries of Python developers in 2020:\n\n \t\t \n\nPYTHON DEVELOPER SALARIES IN THE U.S.\n\nPYTHON DEVELOPER SALARIES IN THE U.K.\n\nBeginner\n\nJunior: $70,000\n\n£50,000\n\n2-5 years\n\n2-5 years: $100,000\n\n£65,000\n\n5+ years\n\n5+ years: $125,000\n\n£80,000\n\nSources\n\nDaxx\n[https://www.daxx.com/blog/development-trends/python-developer-salary-usa],\nDevSkiller [https://devskiller.com/python-developer-salary/]\n\nCWJobs\n[https://www.cwjobs.co.uk/salary-checker/average-python-salary],\nIndeed [https://www.indeed.co.uk/salaries/python-developer-Salaries],\nReed\n[https://www.reed.co.uk/average-salary/average-python-developer-salary-in-west-london]\n\nSalaries vary greatly depending on your location and the location of\nyour employer. \n\nCAREER ADVANCEMENT\n\nBy following this training, you will be able to work as a _Python,\nDjango, Web, _or_ Back-End Developer. _\n\nIn the future, you will be able to evolve your career in different\nways, including:\n\n \t* Diversifying your technical skills to become a full-stack\ndeveloper, i.e. covering both the back end and the front end.\n \t* Specializing in a particular technology; you’ll focus on the\nDjango web framework in this training, and there are plenty of others,\nsuch as Big Data and DevOps.\n \t* After a few years of experience collaborating with other\ndevelopers, you may also choose a more managerial role, as a Lead\nDeveloper or a CTO.\n\nPREREQUISITES\n\nThis training is accessible to all. However, here are a few\nrecommendations:\n\n \t* A high school diploma / GCSE level.\n \t* A good level of English (for non-native speakers, a CEFR level of\nB2, an IELTS band score of 6.5, or a TOEFL score of 80).\n \t* Access to a computer (PC or Mac), headphones, a webcam, and a good\ninternet connection (3.2 Mbps upload and 1.8 Mbps for download). You\ncan use an internet speed test to find out like High Speed Internet\n[https://www.highspeedinternet.com/tools/speed-test].\n\n'
        LearningContent.Content.ExternalResourceDetailViewModel:
            type: object
            properties:
                createdAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                externalUrl:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                shortDescription:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                tags: {}
                title:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                type:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                updatedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
        Policy.PolicyList:
            type: array
            items:
                $ref: '#/components/schemas/Policy.PolicyListItem'
        Policy.PolicyListItem:
            type: object
            properties:
                id:
                    type: string
                    nullable: false
                    example: '652'
                anchor:
                    type: string
                    nullable: false
                    example: '652'
                language:
                    type: string
                    nullable: false
                    example: en
                title:
                    type: string
                    nullable: false
                    example: 'Terms of Use'
                type:
                    type: string
                    nullable: false
                    example: 'terms-conditions'
                version:
                    type: string
                    nullable: false
                    example: '1.0'
                updatedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2018-05-18T16:14:44+0100
                shortDescription:
                    type: string
                    nullable: false
                    example: 'Our terms and conditions'
        Policy.PolicyDetail:
            type: object
            properties:
                id:
                    type: string
                    nullable: false
                    example: 830
                anchor:
                    type: string
                    nullable: false
                    example: '830'
                language:
                    type: string
                    nullable: false
                    example: fr
                title:
                    type: string
                    nullable: false
                    example: 'Terms of Service'
                type:
                    type: string
                    nullable: false
                    example: 'terms-of-sale'
                version:
                    type: string
                    nullable: false
                    example: '1'
                updatedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2019-01-14T15:00:45+0100
                shortDescription:
                    type: string
                    nullable: false
                    example: 'Terms of Service'
                releaseNotes:
                    type: string
                    nullable: false
                    example: ''
                sections:
                    type: array
                    items:
                        $ref: '#/components/schemas/Policy.Section'
        Rating.RatingCollection:
            type: array
            items:
                $ref: '#/components/schemas/Rating.Rating'
        Rating.Rating:
            type: object
            properties:
                author:
                    $ref: '#/components/schemas/Rating.RatingAuthor'
                createdAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                explanation:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                rating:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                ratingSystem:
                    $ref: '#/components/schemas/Rating.RatingSystem'
                type:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        LearningActivity.Codevolve.CodevolveToken:
            type: object
            properties:
                accessToken: {}
        LearningActivity.StudentPathDossier.StudentPathDossier:
            type: object
            properties:
                doNotAssignMentorDate:
                    format: date-time
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:30+02:00
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        Support.SupportAssignmentViewModelDetail:
            type: object
            properties:
                endedAt:
                    format: date-time
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:30+02:00
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                startedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                supportExpertId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                supportRecipientPeriodId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                supportReferenceId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        User.BirthInformation.BirthInformationViewModel:
            type: object
            properties:
                birthDate:
                    type: string
                    nullable: true
                    example: 2020-09-15T00:00:00+00:00
                    format: date
                locality:
                    type: string
                    nullable: true
                    example: 'Paris'
                state:
                    type: string
                    nullable: true
                    example: ''
                country:
                    type: string
                    nullable: true
                    example: 'FR'
                countryName:
                    type: string
                    nullable: true
                    example: 'France'
                googlePlaceId:
                    type: string
                    nullable: true
                    example: 'ChIJD7fiBh9u5kcRYJSMaMOCCwQ'
        User.Communication.CommunicationSettingList:
            type: array
            items:
                $ref: '#/components/schemas/User.Communication.CommunicationSettingListItem'
        User.Communication.CommunicationSettingListItem:
            type: object
            properties:
                type:
                    type: string
                    nullable: false
                    example: 'accept to receive newsletter'
                updatedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                value:
                    type: boolean
                    nullable: false
                    example: true
        User.PhoneNumber.PhoneNumberDetail:
            type: object
            properties:
                phoneNumber:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Support.SupportRecipientPeriodViewModelDetail:
            type: object
            properties:
                endedAt:
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+02:00
                    format: date-time
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                startedAt:
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+02:00
                    format: date-time
                supportAssignments:
                    type: array
                    items:
                        $ref: '#/components/schemas/Support.SupportAssignmentViewModelDetail'
                supportRecipientId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                supportReferenceId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                supportReferenceType:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Course.Project.ProjectDetail:
            type: object
            properties:
                createdAt:
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+02:00
                    format: date-time
                duration:
                    type: string
                    nullable: false
                    example: P12M
                evaluatorType:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                illustration:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                isStudentDeliverable:
                    type: boolean
                    nullable: false
                    example: true
                language:
                    type: string
                    nullable: false
                    example: fr
                lifecycleStatus:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                requiredPresentation:
                    type: boolean
                    nullable: false
                    example: true
                shortDescription:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                title:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                updatedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                url:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                assessmentGuidelines:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                assignment:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        LearningContent.Project.MentorGuide.Impl.ProjectMentorGuide:
            type: object
            properties:
                content:
                    type: string
                    nullable: false
                    example: '<h3>Here is a Mentor guide in HTML format to assist mentors on specific project issues.</h3>'
        LearningContent.Content.ExternalResourceListItemViewModelCollection:
            type: array
            items:
                $ref: '#/components/schemas/LearningContent.Content.ExternalResourceListItemViewModel'
        LearningContent.Content.ExternalResourceListItemViewModel:
            type: object
            properties:
                createdAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                externalUrl:
                    type: string
                    nullable: false
                    example: 'https://url-of-a-domain.com/path/to/resource'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                shortDescription:
                    type: string
                    nullable: false
                    example: 'Resource description'
                tags: {}
                title:
                    type: string
                    nullable: false
                    example: 'Resource title'
                type:
                    type: string
                    nullable: false
                    example: book
                    enum:
                        - 'exclusive content'
                        - video
                        - audio
                        - website
                        - article
                        - document
                        - book
                        - course
                updatedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
        Web.Student.AttendanceCertificate.ShowAttendanceCertificate:
            type: object
            properties:
                enrollmentEndedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                enrollmentStartedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                filename:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                fileNumber:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                generatedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                juryDate:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                pathDegreeTitles:
                    type: array
                    items:
                        type: string
                        nullable: false
                        example: 'Lorem Ipsum'
                pathMonthsDuration:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                pathPdfLink:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                pathProjectHoursDuration:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                pathTitle:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                projectsDuration:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                studentEffectiveMentorshipSessionsHoursDuration:
                    type: string
                    nullable: false
                    example: P12M
                studentFirstName:
                    type: string
                    nullable: false
                    example: John
                studentGender:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                studentLastName:
                    type: string
                    nullable: false
                    example: Doe
                studentLocale:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                studentMentorshipSessions:
                    type: array
                    items:
                        $ref: '#/components/schemas/Web.Student.AttendanceCertificate.MentorshipProgressionSummary'
                studentMentorshipSessionsHoursDuration:
                    type: string
                    nullable: false
                    example: P12M
                studentMentorshipSessionsProgress:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                studentProjectSessions:
                    type: array
                    items:
                        $ref: '#/components/schemas/Web.Student.AttendanceCertificate.ProjectProgressionSummary'
                studentProjectsSessionsDuration:
                    type: string
                    nullable: false
                    example: P12M
                studentProjectsSessionsProgress:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                trainingType:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                studentlocale:
                    type: string
                    nullable: false
                    example: fr
        User.UserViewModel:
            type: object
            properties:
                displayName:
                    type: string
                    nullable: false
                    example: JohnDoe
                email:
                    type: string
                    nullable: false
                    example: john.doe@openclassrooms.lan
                enrollment:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                firstName:
                    type: string
                    nullable: false
                    example: John
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                identityLocked:
                    type: boolean
                    nullable: false
                    example: true
                language:
                    type: string
                    nullable: false
                    example: fr
                lastName:
                    type: string
                    nullable: false
                    example: Doe
                organization:
                    $ref: '#/components/schemas/Organization.OrganizationViewModelDetail'
                profilePicture:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        User.Team.UserTeamViewModelListItem:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                locale:
                    type: string
                    nullable: false
                    example: fr
                name:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                roles:
                    type: array
                    items:
                        $ref: '#/components/schemas/Team.User.TeamRoleViewModelListItem'
        OC.BusinessRules.Entities.Product.RecurringCharge:
            type: object
        OC.BusinessRules.Entities.FinancialAid.FundingMechanism.FundingMechanism:
            type: object
        OC.BusinessRules.Entities.Product.Product:
            type: object
            properties:
                id:
                    type: string
                    example: path-185
                type:
                    type: string
                    example: path
        Course.Author.Author:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                displayName:
                    type: string
                    nullable: false
                    example: JohnDoe
                firstName:
                    type: string
                    nullable: false
                    example: John
                lastName:
                    type: string
                    nullable: false
                    example: Doe
                shortDisplayName:
                    type: string
                    nullable: false
                    example: JohnDoe
                profilePicture:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Course.Partner.PartnerBacker:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                logo:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                name:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Course.Partner.PartnerCreator:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                logo:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                name:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Course.CourseParticipation.Toc.TocItemWithUserInformation:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                title:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                type:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                learningActivityStatus:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                score:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        Course.Category.Category:
            type: object
            properties:
                color:
                    type: string
                    nullable: false
                    example: '#77b4b4'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                name:
                    type: string
                    nullable: false
                    example: 'Soft skills'
        Course.Certification.Certification.Certification:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 2
                authority:
                    type: string
                    nullable: false
                    example: 'CNCP'
                title:
                    type: string
                    nullable: false
                    example: 'Web developer (Développeur(euse) d’application)'
                type:
                    type: string
                    nullable: false
                    example: 'RNCP'
                level:
                    type: string
                    nullable: false
                    example: 'Diplôme niveau 6 (Bac+3/4)'
                prerequisiteCertificate:
                    $ref: '#/components/schemas/Certification.Certification.CertificationPreRequisite'
        Certification.Certification.CertificationPreRequisite:
            type: object
            properties:
                level:
                    type: string
                    example: "5"
                field:
                    type: string
                    example: 'Gardening'

        Certification.Signatory.SignatoryList:
            type: array
            items:
                $ref: '#/components/schemas/Certification.Signatory.SignatoryListItemViewModel'
        Certification.Signatory.SignatoryListItemViewModel:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                firstName:
                    type: string
                    nullable: false
                    example: 'Lorem'
                lastName:
                    type: string
                    nullable: false
                    example: 'Ipsum'
                positionTitle:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                signatureUrl:
                    type: string
                    nullable: false
                    example: '/lorem/ipsum.png'

        LearningActivity.LearningPath.LearningPathCompletionViewModel:
            type: object
            properties:
                actual:
                    format: float
                    type: number
                    nullable: false
                    example: '0.85'
                expected:
                    format: float
                    type: number
                    nullable: false
                    example: '0.85'
                status:
                    type: string
                    nullable: false
                    example: in-advance
                    enum:
                        - in-advance
                        - on-track-in-advance
                        - on-track-slightly-late
                        - late
                        - critically-late
        LearningActivity.User.UserLearningInformationViewModel:
            type: object
            properties:
                completedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                isFollowingLearningPath:
                    type: boolean
                    nullable: false
                    example: true
                unfollowedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
        Media.MediaSource:
            type: object
            properties:
                height:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                mimeType:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                resolution:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                size:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                url:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                width:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        Exercise.Toc.TocItem:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                title:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                type:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Policy.Section:
            type: object
            properties:
                anchor:
                    type: string
                    nullable: false
                    example: '831'
                content:
                    type: string
                    nullable: false
                    example: '<p>In the Terms of Service, the following terms with a capital letter, in the singular and/or the plural, have the meaning given to them as follows:</p>'
                id:
                    type: string
                    nullable: false
                    example: 831
                sections:
                    type: array
                    items:
                        $ref: '#/components/schemas/Policy.Section'
                shortDescription:
                    type: string
                    nullable: false
                    example: ''
                title:
                    type: string
                    nullable: false
                    example: 'ARTICLE 1: DEFINITION'
        Rating.RatingAuthor:
            type: object
            properties:
                displayableName:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                firstName:
                    type: string
                    nullable: false
                    example: John
                gender:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                lastName:
                    type: string
                    nullable: false
                    example: Doe
                profilePicture:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                username:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Rating.RatingSystem:
            type: object
            properties:
                max:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                min:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                name:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Web.Student.AttendanceCertificate.MentorshipProgressionSummary:
            type: object
            properties:
                completedDuration:
                    type: string
                    nullable: false
                    example: P12M
                month:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                sessions:
                    type: array
                    items:
                        $ref: '#/components/schemas/Web.Student.AttendanceCertificate.MentorshipSession'
                theoreticalDuration:
                    type: string
                    nullable: false
                    example: P12M
        Web.Student.AttendanceCertificate.ProjectProgressionSummary:
            type: object
            properties:
                projectDuration:
                    type: string
                    nullable: false
                    example: P12M
                projectTitle:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                validatedDuration:
                    type: string
                    nullable: false
                    example: P12M
                validationDate:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
        Team.User.TeamRoleViewModelListItem:
            type: object
            properties:
                endedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-10-06T18:51:01+02:00
                role:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                startedAt:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-10-06T18:51:01+02:00
        Web.Student.AttendanceCertificate.MentorshipSession:
            type: object
            properties:
                date:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                status:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Calendar.Availability.GetAvailabilitiesParameterModel:
            type: object
            properties:
                since:
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:30+02:00
                    format: date-time
                until:
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:30+02:00
                    format: date-time
                recurrence: {}
        Calendar.Availability.PostAvailability:
            type: object
            required:
                - startDate
                - endDate
            properties:
                startDate:
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+02:00
                    format: date-time
                endDate:
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+02:00
                    format: date-time
                recurrence: {}
        Calendar.Event.GetEventsParameterModel:
            type: object
            properties:
                since:
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:30+02:00
                    format: date-time
                until:
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:30+02:00
                    format: date-time
        Mentorship.Presentation.PostPresentationSession:
            type: object
            required:
                - sessionDate
            properties:
                mentorId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                sessionDate:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                now:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
        Mentorship.Presentation.TimeSlot.GetPresentationTimeSlotParameterModel:
            type: object
            properties:
                since:
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:29+00:00
                    format: date-time
                sinceMin:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                until:
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:29+00:00
                    format: date-time
                untilMax:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                untilMin:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Organization.PatchOrganizationModel:
            type: object
            properties:
                description:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                logo:
                    type: object
                name:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Organization.PostOrganizationModel:
            type: object
            required:
                - name
            properties:
                description:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                language:
                    type: string
                    example: 'fr'
                logo:
                    type: object
                name:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                    maxLength: 255
                    minLength: 1
        Organization.Team.PostOrganizationTeamModel:
            type: object
            required:
                - locale
                - name
            properties:
                locale:
                    type: string
                    nullable: false
                    example: fr
                name:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                    maxLength: 255
                    minLength: 1
        Organization.User.PostOrganizationUserModel:
            type: object
            properties:
                userId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        Support.GetUserSupportsModel:
            type: object
            properties:
                type:
                    type: array
                    nullable: false
                    items:
                        type: string
                        nullable: true
                        enum:
                            - tutoring
                            - coaching
                        example: tutoring
        User.ExpectedBenefits.ExpectedBenefitModelList:
            type: array
            items:
                $ref: '#/components/schemas/User.ExpectedBenefits.ExpectedBenefitModel'
        User.ExpectedBenefits.ExpectedBenefitModel:
            type: object
            properties:
                comment:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                id:
                    type: string
                    nullable: false
                    example: expect_boost_career
                    enum:
                        - expect_boost_career
                        - expect_change_career
                        - expect_first_job
                        - expect_learn_for_fun
                        - expect_other_benefit
                        - expect_train_employees
        User.Interest.PostUserInterests:
            type: object
            required:
                - userInterests
            properties:
                userInterests:
                    type: array
                    items:
                        $ref: '#/components/schemas/User.Interest.PostUserInterest'
        Student.Project.PostStudentProjectFileModel:
            type: object
            properties:
                uploaded_file:
                    type: object
        CourseCollection.PostCourseCollection:
            type: object
            properties:
                duration:
                    type: string
                    nullable: false
                    example: P12M
                gradientColorFrom:
                    type: string
                    nullable: false
                    example: '#77b4b4'
                gradientColorTo:
                    type: string
                    nullable: false
                    example: '#77b4b4'
                illustration:
                    type: string
                    nullable: false
                    example: image
                locale:
                    type: string
                    nullable: false
                    example: fr
                longDescription:
                    type: string
                    nullable: false
                    example: '<p>Developers are the builders of the internet. They receive instructions (generally a mockup image done by a product manager or designer) and bring the mockup to life by writing HTML and CSS code. The more advanced a developer gets, the more they’ll start to integrate other languages like JavaScript, Ruby, or Python.</p>'
                position:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                shortDescription:
                    type: string
                    nullable: false
                    example: 'Web developers use HTML and CSS to create wonderful websites, evaluate the best languages for their purposes, and can share their creations with other people using Git and GitHub.'
                status:
                    type: string
                    nullable: false
                    example: active
                title:
                    type: string
                    nullable: false
                    example: 'Web Developer'
        CourseCollection.PutCourseCollection:
            type: object
            properties:
                duration:
                    type: string
                    nullable: false
                    example: P12M
                gradientColorFrom:
                    type: string
                    nullable: false
                    example: '#77b4b4'
                gradientColorTo:
                    type: string
                    nullable: false
                    example: '#77b4b4'
                illustration:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                locale:
                    type: string
                    nullable: false
                    example: fr
                longDescription:
                    type: string
                    nullable: false
                    example: '<p>Developers are the builders of the internet. They receive instructions (generally a mockup image done by a product manager or designer) and bring the mockup to life by writing HTML and CSS code. The more advanced a developer gets, the more they’ll start to integrate other languages like JavaScript, Ruby, or Python.</p>'
                position:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                shortDescription:
                    type: string
                    nullable: false
                    example: 'Web developers use HTML and CSS to create wonderful websites, evaluate the best languages for their purposes, and can share their creations with other people using Git and GitHub.'
                status:
                    type: string
                    nullable: false
                    example: archived
                title:
                    type: string
                    nullable: false
                    example: 'Web Developer'
                    maxLength: 255
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        LearningContent.Content.ExternalResource.PatchExternalResourceModel:
            type: object
            required:
                - externalUrl
                - title
                - type
            properties:
                externalUrl:
                    type: string
                    nullable: false
                    example: 'https://vimeo.com'
                shortDescription:
                    type: string
                    nullable: false
                    example: 'A short description of the resource'
                tags:
                    type: array
                    example:
                        - essential
                    items:
                        type: string
                        nullable: true
                        enum:
                            - essential
                        example: essential
                title:
                    type: string
                    nullable: false
                    example: 'Resource title'
                type:
                    type: string
                    nullable: false
                    example: book
                    enum:
                        - 'exclusive content'
                        - video
                        - audio
                        - website
                        - article
                        - document
                        - book
                        - course
        WebServices.Codevolve.GetCodevolveTokenRequest:
            type: object
            required:
                - contentId
            properties:
                contentId:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        StudentPathDossier.PatchStudentPathDossier:
            type: object
            properties:
                doNotAssignMentorDate:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:31+02:00
                doNotAssignMentorDateUpdated:
                    type: boolean
                    nullable: false
                    example: true
        Support.PostExpertAssignment:
            type: object
            required:
                - supportExpertId
                - supportRecipientPeriodId
            properties:
                supportExpertId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                supportRecipientPeriodId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        Support.PostSupportExpertReplacement:
            type: object
            required:
                - newSupportExpertId
                - previousSupportExpertId
                - supportRecipientPeriodId
            properties:
                newSupportExpertId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                previousSupportExpertId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                supportRecipientPeriodId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
        Team.PostTeamInvitations:
            type: object
            required:
                - emails
            properties:
                emails:
                    type: array
                    items:
                        type: string
                        nullable: false
                        example: test1@openclassrooms.lan
                    example:
                        - test1@openclassrooms.lan
                        - test2@example.com
        User.BirthInformation.PatchBirthInformation:
            type: object
            properties:
                locality:
                    type: string
                    nullable: false
                    example: 'Paris'
                state:
                    type: string
                    nullable: false
                    example: ''
                country:
                    type: string
                    nullable: false
                    example: 'FR'
                countryName:
                    type: string
                    nullable: false
                    example: 'France'
                googlePlaceId:
                    type: string
                    nullable: false
                    example: 'ChIJD7fiBh9u5kcRYJSMaMOCCwQ'
                birthDateUpdated:
                    type: boolean
                    nullable: false
                    example: true
                localityUpdated:
                    type: boolean
                    nullable: false
                    example: true
                stateUpdated:
                    type: boolean
                    nullable: false
                    example: true
                countryUpdated:
                    type: boolean
                    nullable: false
                    example: true
                countryNameUpdated:
                    type: boolean
                    nullable: false
                    example: true
                googlePlaceIdUpdated:
                    type: boolean
                    nullable: false
                    example: true
        User.BirthInformation.PutBirthInformation:
            type: object
            required:
                - locality
                - country
                - countryName
            properties:
                locality:
                    type: string
                    example: 'Paris'
                state:
                    type: string
                country:
                    type: string
                    example: 'FR'
                countryName:
                    type: string
                    example: 'France'
                googlePlaceId:
                    type: string
                    example: 'ChIJD7fiBh9u5kcRYJSMaMOCCwQ'
        User.Email.PostChangeEmail:
            type: object
            required:
                - email
            properties:
                email:
                    type: string
                    nullable: false
                    example: user-new-email@openclassrooms.lan
        User.Communication.PatchCommunicationSettings:
            type: object
            required:
                - type
            properties:
                type:
                    type: string
                    nullable: false
                    example: 'accept job opportunities'
                    enum:
                        - 'accept job opportunities'
                        - 'accept to receive newsletter'
                        - 'participate in user research'
                value:
                    type: boolean
                    nullable: false
                    example: true
        User.Communication.PutCommunicationSettings:
            type: object
            properties:
                newsletter:
                    type: boolean
                    nullable: false
                    example: true
        User.PhoneNumber.PutPhoneNumber:
            type: object
            required:
                - phoneNumber
            properties:
                phoneNumber: {}
        User.PostUser:
            type: object
            required:
                - email
                - firstName
                - lastName
            properties:
                birthDate:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:31+02:00
                email:
                    type: string
                    nullable: false
                    example: JohnDoe@example.com
                firstName:
                    type: string
                    nullable: false
                    example: John
                lastName:
                    type: string
                    nullable: false
                    example: Doe
        User.PatchUser:
            type: object
            required:
                - data
            properties:
                data:
                    type: array
                    items:
                        type: array
                        nullable: false
                        items:
                            type: string
                firstName:
                    type: string
                    nullable: false
                    example: John
                firstNameUpdated:
                    type: boolean
                    nullable: false
                    example: true
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                lastName:
                    type: string
                    nullable: false
                    example: Doe
                lastNameUpdated:
                    type: boolean
                    nullable: false
                    example: true
        User.RequestNewPassword:
            type: object
            required:
                - email
            properties:
                email:
                    type: string
                    nullable: false
                    example: example@mail.com
        FinancialAid.PostFinancialAid:
            type: object
            required:
                - product
                - startDate
                - endDate
                - program
                - firstName
                - lastName
                - company
                - invoiceDetails
            properties:
                product:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                startDate:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:31+02:00
                endDate:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:31+02:00
                program:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                firstName:
                    type: string
                    nullable: false
                    example: John
                lastName:
                    type: string
                    nullable: false
                    example: Doe
                company:
                    $ref: '#/components/schemas/FinancialAid.PostFinancialAid.Company'
                invoiceDetails:
                    $ref: '#/components/schemas/FinancialAid.PostFinancialAid.InvoiceDetails'
        User.Privacy.PatchPrivacySetting:
            type: object
            required:
                - type
            properties:
                type:
                    type: string
                    nullable: false
                    example: 'share data to improve user experience'
                    enum:
                        - 'share user profile to employers'
                        - 'share data to improve user experience'
                value:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Support.PostSupportRecipientPeriod:
            type: object
            required:
                - supportRecipientId
                - supportReferenceType
            properties:
                supportExpertId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                supportRecipientId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                supportReferenceType:
                    type: string
                    nullable: false
                    example: coaching
        LearningContent.Project.ProjectExternalResource.PostExternalResourceModel:
            type: object
            required:
                - externalUrl
                - title
                - type
            properties:
                externalUrl:
                    type: string
                    nullable: false
                    example: 'https://vimeo.com'
                shortDescription:
                    type: string
                    nullable: true
                    example: 'A short description of the resource'
                tags:
                    type: array
                    example:
                        - essential
                    items:
                        type: string
                        nullable: true
                        enum:
                            - essential
                        example: essential
                title:
                    type: string
                    nullable: false
                    example: 'Resource title'
                type:
                    type: string
                    nullable: false
                    example: video
                    enum:
                        - 'exclusive content'
                        - video
                        - audio
                        - website
                        - article
                        - document
                        - book
                        - course
        LearningContent.Project.ProjectExternalResource.PatchExternalResourcesModel:
            type: object
            properties:
                sortByIds:
                    type: array
                    items:
                        format: int32
                        type: integer
                        nullable: false
                        example: 2
                    example:
                        - 3
                        - 1
                        - 2
        Course.PatchCourseModel:
            type: object
            properties:
                prerequisite:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                description:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                difficulty:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                duration:
                    type: string
                    nullable: false
                    example: P12M
                illustration:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                license:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
                language:
                    type: string
                    nullable: false
                    example: fr
                teaserPictureUrl:
                    type: string
                    nullable: false
                    example: 'Lorem Ipsum'
        Team.GetTeamInvitations:
            type: array
            items:
                $ref: '#/components/schemas/Team.TeamInvitations'
        Team.TeamInvitations:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    example: 12345
                email:
                    type: string
                    example: email@domain.com
                sentAt:
                    format: date-time
                    type: string
                    example: 2020-09-15T17:15:31+02:00
                targets:
                    type: array
                    items:
                        $ref: '#/components/schemas/Team.TeamInvitations.Targets'
        Team.TeamInvitations.Targets:
            type: object
            properties:
                id:
                    type: string
                    example: someUniqueIdentifier
                    description: Identifier is a string for Organization object / an integer for Team object
                name:
                    type: string
                    example: OrganizationName
                roles:
                    type: array
                    items:
                        type: string
                    example:
                        - organization_user
                type:
                    type: string
                    example: organization
                    enum:
                        - organization
                        - team
        OC.BusinessRules.Responders.Organization.User.OrganizationRoleListItemResponse:
            type: object
        User.Interest.PostUserInterest:
            type: object
            required:
                - type
                - id
            properties:
                categoryId:
                    format: int32
                    type: integer
                    nullable: true
                    example: 15
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 409
                pathId:
                    format: int32
                    type: integer
                    nullable: true
                    example: 59
                type:
                    type: string
                    nullable: false
                    example: path
                    enum:
                        - category
                        - path
        FinancialAid.PostFinancialAid.Company:
            type: object
            required:
                - id
                - name
            properties:
                id:
                    type: string
                    nullable: false
                    example: '14'
                name:
                    type: string
                    nullable: false
                    example: 'Agefos PME Hauts-de-France'
        FinancialAid.PostFinancialAid.InvoiceDetails:
            type: object
            required:
                - address
                - fundingOrganization
                - label
                - orderId
                - applicantId
                - name
                - duration
                - amount
            properties:
                address:
                    $ref: '#/components/schemas/FinancialAid.PostFinancialAid.InvoiceDetails.Address'
                fundingOrganization:
                    type: string
                    nullable: false
                    example: Agefiph
                label:
                    type: string
                    nullable: false
                    example: label
                orderId:
                    type: string
                    nullable: false
                    example: '34'
                applicantId:
                    type: string
                    nullable: false
                    example: '4'
                name:
                    type: string
                    nullable: false
                    example: '4'
                duration:
                    format: date-interval
                    type: string
                    nullable: false
                    example: P3M
                amount:
                    $ref: '#/components/schemas/OC.BusinessRules.Entities.Shop.Payment.Money'
        FinancialAid.PostFinancialAid.InvoiceDetails.Address:
            type: object
            required:
                - addressComponents
            properties:
                addressComponents:
                    type: array
                    items:
                        $ref: '#/components/schemas/FinancialAid.PostFinancialAid.InvoiceDetails.Address.AddressComponent'
        FinancialAid.PostFinancialAid.InvoiceDetails.Address.AddressComponent:
            type: object
            required:
                - longName
                - shortName
                - types
            properties:
                longName:
                    type: string
                    nullable: false
                    example: 'Long name'
                shortName:
                    type: string
                    nullable: false
                    example: 'Short name'
                types:
                    type: array
                    items:
                        type: string
                        nullable: false
                        example: 'Lorem Ipsum'
                    nullable: false
        OC.BusinessRules.Entities.Shop.Payment.Money:
            type: object
            properties:
                amount:
                    format: float
                    type: number
                    example: '9000.00'
                currency:
                    type: string
                    example: EUR
        Course.ExerciseParticipation.ExerciseSession.PeerAssessmentSessionSkillEvaluationModel:
            type: object
            required:
                - exerciseSkillId
                - comment
                - validated
            properties:
                exerciseSkillId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 2911
                comment:
                    type: string
                    nullable: false
                    example: 'Great job'
                validated:
                    type: boolean
                    nullable: false
                    example: true
        Security.SAMLConnection:
            type: object
            required:
                - organizationId
                - idpLoginEndpoint
                - idpPublicKey
            properties:
                organizationId:
                    type: string
                    format: uuid
                    nullable: false
                    example: '2frt5hjk'
                idpSpEntityId:
                    type: string
                    format: uri
                    nullable: false
                    example: 'https://some-idp.tld/123456fsdsds/'
                idpLoginEndpoint:
                    type: string
                    format: uri
                    nullable: false
                    example: 'https://some-idp.tld/123456fsdsds/login'
                idpLogoutEndpoint:
                    type: string
                    format: uri
                    nullable: true
                    example: 'https://some-idp.tld/123456fsdsds/logout'
                idpMetadataEndpoint:
                    type: string
                    format: uri
                    nullable: true
                    example: 'https://some-idp.tld/123456fsdsds/'
                idpPublicKey:
                    type: string
                    format: byte
                    nullable: false
                    example: 'thisShouldBeAPublicContent'

        Security.SAMLConnectionFromMetadataEndpoint:
            type: object
            required:
                - organizationId
                - idpMetadataEndpoint
            properties:
                organizationId:
                    type: string
                    format: uuid
                    nullable: false
                    example: '2frt5hjk'
                idpMetadataEndpoint:
                    type: string
                    format: uri
                    nullable: false
                    example: 'https://some-idp.tld/123456fsdsds/'

        Security.SAML.AuthenticationRequestViewModel:
            type: object
            properties:
                idpAuthenticationUrl:
                    type: string
                    nullable: false
                    example: 'https://okta.com/AuthNRequest=abcdef123455'
                requestId:
                    type: string
                    nullable: false
                    example: 'ONELOGIN_f2f8316ab3686f873a1aafc95'

        IdentityManagement.Provisioning.SCIM.Schemas.ServiceProviderConfig:
            type: object
            properties:
                patch:
                    type: object
                    properties:
                        supported:
                            type: boolean
                            description: 'Is patch supported ?'
                            example: false
                bulk:
                    type: object
                    properties:
                        supported:
                            type: boolean
                            description: 'Is bulk supported ?'
                            example: false
                filter:
                    type: object
                    properties:
                        supported:
                            type: boolean
                            description: 'Is filter supported ?'
                            example: false
                sort:
                    type: object
                    properties:
                        supported:
                            type: boolean
                            description: 'Is sort supported ?'
                            example: false
                changePassword:
                    type: object
                    properties:
                        supported:
                            type: boolean
                            description: 'Is changePassword supported ?'
                            example: false
                etag:
                    type: object
                    properties:
                        supported:
                            type: boolean
                            description: 'Is ETAG supported ?'
                            example: false
                authenticationSchemes:
                    $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Schemas.AuthenticationSchemes'
                meta:
                    type: object
                    properties:
                        location:
                            type: string
                            format: uri
                            nullable: false
                            example: 'https://api.openclassrooms.lan/saml/{connectionPublicId}/scim/ServiceProviderConfig'
                        resourceType:
                            type: string
                            example: 'ServiceProviderConfig'
                            nullable: false
                    required:
                        - location
                        - resourceType

        IdentityManagement.Provisioning.SCIM.Schemas.AuthenticationSchemes:
            type: object
            properties:
                'type':
                    type: string
                    nullable: false
                    example: 'oauthbearertoken'
                name:
                    type: string
                    nullable: false
                    example: 'OAuth Bearer Token'
                description:
                    type: string
                    nullable: false
                    example: 'Authentication Scheme using the OAuth Bearer Token Standard'
                specUrl:
                    type: string
                    format: uri
                    nullable: false
                    example: 'http://tools.ietf.org/html/draft-ietf-oauth-v2-bearer-01'
            required:
                - type
                - name

        IdentityManagement.Provisioning.SCIM.Response.Schemas:
            type: object
            properties:
                schemas:
                    type: array
                    items:
                        type: string
                    uniqueItems: true
                    example: [ 'urn:ietf:params:scim:api:messages:2.0:ListResponse' ]
                totalResults:
                    type: integer
                    nullable: false
                itemsPerPage:
                    type: integer
                    nullable: false
                startIndex:
                    type: integer
                    nullable: false
                    example: 1
                Resources:
                    type: array
                    items:
                        oneOf:
                            -   $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.Schema.Resource.User'
                            -   $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.Schema.Resource.Group'
                            -   $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.Schema.Resource.UserExtension'
            required:
                - schemas
                - totalResults
                - itemsPerPage
                - startIndex
                - Resources

        IdentityManagement.Provisioning.SCIM.Response.Schema.Resource.User:
            type: object
            properties:
                id:
                    type: string
                    nullable: false
                    example: 'urn:ietf:params:scim:schemas:core:2.0:User'
                    enum:
                        - 'urn:ietf:params:scim:schemas:core:2.0:User'
                name:
                    type: string
                    nullable: false
                    example: 'User'
                    enum:
                        - 'User'
                description:
                    type: string
                attributes:
                    $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.Schema.Resource.User.Attributes'
                meta:
                    type: object
                    properties:
                        resourceType:
                            type: string
                            nullable: false
                            example: Schema
                        location:
                            type: string
                            nullable: false
                            example: 'https://api.openclassrooms.lan/saml/{connectionPublicId}/scim/Schemas/urn:ietf:params:scim:schemas:core:2.0:User'
            required:
                - id
                - name
                - attributes
                - meta

        IdentityManagement.Provisioning.SCIM.Response.Schema.Resource.User.Attributes:
            type: object
            properties:
                id:
                    type: string
                    nullable: false
                    example: '123dfgt55'
                userName:
                    type: string
                    nullable: false
                    example: 'zo.zor@email.com'
                name:
                    type: object
                    properties:
                        givenName:
                            type: string
                            nullable: false
                            example: 'Zo'
                        familyName:
                            type: string
                            nullable: false
                            example: 'Zor'
                    nullable: false
                emails:
                    $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.Schema.Resource.User.Attributes.Emails'
                active:
                    type: boolean
                    nullable: false
                    example: true
                locale:
                    type: string
                    nullable: true
                    example: fr
            required:
                - id
                - userName
                - name
                - active

        IdentityManagement.Provisioning.SCIM.Response.Schema.Resource.User.Attributes.Emails:
            type: object
            properties:
                value:
                    type: string
                    example: zo.zor@email.com
                display:
                    type: string
                    example: zo.zor@email.com
                'type':
                    type: string
                    example: 'work'
                    enum: [ 'work', 'home', 'other' ]
                primary:
                    type: boolean
                    example: true
            required:
                - value
                - type
                - primary

        IdentityManagement.Provisioning.SCIM.Response.Schema.Resource.Group:
            type: object
            properties:
                id:
                    type: string
                    nullable: false
                    example: 'urn:ietf:params:scim:schemas:core:2.0:Group'
                    enum:
                        - 'urn:ietf:params:scim:schemas:core:2.0:Group'
                name:
                    type: string
                    nullable: false
                    example: 'urn:ietf:params:scim:schemas:core:2.0:Group'
                    enum:
                        - 'urn:ietf:params:scim:schemas:core:2.0:Group'
                description:
                    type: string
                attributes:
                    $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.Schema.Resource.Group.Attributes'
                meta:
                    type: object
                    properties:
                        resourceType:
                            type: string
                            nullable: false
                            example: Schema
                        location:
                            type: string
                            nullable: false
                            example: 'https://api.openclassrooms.lan/saml/{connectionPublicId}/scim/Schemas/urn:ietf:params:scim:schemas:core:2.0:Group'
            required:
                - id
                - name
                - attributes
                - meta

        IdentityManagement.Provisioning.SCIM.Response.Schema.Resource.Group.Attributes:
            type: object
            properties:
                displayName:
                    type: string
                    nullable: false
                    example: 'Zozor Group'
                groupType:
                    type: string
                    nullable: true
                    example: 'Team'
                members:
                    type: array
                    items:
                        $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.Schema.Resource.Group.Attributes.Member'

        IdentityManagement.Provisioning.SCIM.Response.Schema.Resource.Group.Attributes.Member:
            type: object
            properties:
                value:
                    type: string
                    nullable: true
                    example: '123dfgt55'
                '$ref':
                    type: object
                    nullable: true
                    example: User
                type:
                    type: string
                    nullable: true
                    example: 'User'

        IdentityManagement.Provisioning.SCIM.Response.Schema.Resource.UserExtension:
            type: object
            properties:
                dateOfBirth:
                    type: string
                    nullable: true

        IdentityManagement.Provisioning.SCIM.Response.ResourceTypes:
            type: object
            properties:
                schemas:
                    type: array
                    items:
                        type: string
                    uniqueItems: true
                    example: [ 'urn:ietf:params:scim:api:messages:2.0:ListResponse' ]
                totalResults:
                    type: integer
                    nullable: false
                itemsPerPage:
                    type: integer
                    nullable: false
                startIndex:
                    type: integer
                    nullable: false
                    example: 1
                Resources:
                    type: array
                    items:
                        oneOf:
                            -   $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.ResourceTypes.Resource.User'
                            -   $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.ResourceTypes.Resource.Group'
            required:
                - schemas
                - totalResults
                - itemsPerPage
                - startIndex
                - Resources

        IdentityManagement.Provisioning.SCIM.Response.ResourceTypes.Resource.User:
            type: object
            properties:
                id:
                    type: string
                    nullable: false
                    example: 'User'
                name:
                    type: string
                    nullable: false
                    example: 'User'
                description:
                    type: string
                endpoint:
                    type: string
                    example: '/Users'
                schemas:
                    type: array
                    items:
                        type: string
                    uniqueItems: true
                    example: [ 'urn:ietf:params:scim:api:messages:2.0:ResourceType' ]
                schema:
                    type: string
                    example: 'urn:ietf:params:scim:schemas:core:2.0:User'
                meta:
                    type: object
                    properties:
                        resourceType:
                            type: string
                            nullable: false
                            example: ResourceType
                        location:
                            type: string
                            nullable: false
                            example: 'https://api.openclassrooms.lan/saml/{connectionPublicId}/scim/ResourceTypes/User'
                schemaExtensions:
                    type: object
                    properties:
                        required:
                            type: boolean
                            example: false
                        schema:
                            type: string
                            example: 'urn:ietf:params:scim:schemas:extension:OpenClassrooms:2.0:User'
            required:
                - name
                - endpoint
                - schema

        IdentityManagement.Provisioning.SCIM.Response.ResourceTypes.Resource.Group:
            type: object
            properties:
                id:
                    type: string
                    nullable: false
                    example: 'Group'
                name:
                    type: string
                    nullable: false
                    example: 'Group'
                description:
                    type: string
                endpoint:
                    type: string
                    example: '/Groups'
                schemas:
                    type: array
                    items:
                        type: string
                    uniqueItems: true
                    example: [ 'urn:ietf:params:scim:api:messages:2.0:ResourceType' ]
                schema:
                    type: string
                    example: 'urn:ietf:params:scim:schemas:core:2.0:Group'
                meta:
                    type: object
                    properties:
                        resourceType:
                            type: string
                            nullable: false
                            example: ResourceType
                        location:
                            type: string
                            nullable: false
                            example: 'https://api.openclassrooms.lan/saml/{connectionPublicId}/scim/ResourceTypes/Group'
            required:
                - name
                - endpoint
                - schema

        IdentityManagement.Provisioning.SCIM.Response.List.Users:
            type: object
            properties:
                schemas:
                    type: array
                    items:
                        type: string
                    uniqueItems: true
                    example: [ 'urn:ietf:params:scim:api:messages:2.0:ListResponse' ]
                totalResults:
                    type: integer
                    example: 42
                startIndex:
                    type: integer
                    example: 1
                itemsPerPage:
                    type: integer
                    default: 20
                    example: 25
                Resources:
                    type: array
                    items:
                        allOf:
                            -   $ref: '#/components/schemas/IdentityManagement.Provisioning.SCIM.Response.User'
                    uniqueItems: true
            required:
                - schemas
                - totalResults
                - startIndex
                - itemsPerPage
                - Resources

        IdentityManagement.Provisioning.SCIM.Response.User:
            type: object
            description: "Properties are defined by the User schema representation. The following are minimal representation"
            properties:
                schemas:
                    type: array
                    items:
                        type: string
                    uniqueItems: true
                    example: [ 'urn:ietf:params:scim:schemas:core:2.0:User' ]
                id:
                    type: string
                    nullable: false
                    example: '3rrf5dfdt3478'
                userName:
                    type: string
                    nullable: false
                meta:
                    type: object
                    properties:
                        resourceType:
                            type: string
                            nullable: false
                            example: User
                        location:
                            type: string
                            nullable: false
                            example: 'https://api.openclassrooms.lan/saml/{connectionPublicId}/scim/Users/3rrf5dfdt3478'
            required:
                - schemas
                - id
                - userName
                - meta

        Mentorship.MentoringSession.PostMentoringSessionModel:
            type: object
            required:
                - sessionDate
            properties:
                mentorId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                projectId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                studentId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                sessionDate:
                    format: date-time
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00

        Mentorship.MentoringSession.PatchMentoringSessionModel:
            type: object
            properties:
                projectId:
                    format: int32
                    type: integer
                    nullable: true
                    example: 661
                sessionDate:
                    format: date-time
                    type: string
                    nullable: true
                    example: 2021-10-11T15:00:00Z
                studentFacingNote:
                    type: string
                    nullable: true
                    example: 'Great progress'

        Mentorship.MentoringSession.CompleteMentoringSessionRequest:
            type: object
            properties:
                studentFacingNote:
                    type: string
                    nullable: false
                    example: 'Great progress'
                currentUserId:
                    type: integer
                    format: int32
                    nullable: false
                    minimum: 1
                    maximum: 2147483647
                    example: 34235
                internalNote:
                    type: string
                    nullable: true
                    example: 'The student is making progress'
                projectCompletion:
                    type: number
                    format: float
                    nullable: false
                    minimum: 0
                    maximum: 0.95
                    example: 0.5
            required:
                - studentFacingNote
                - projectCompletion

        Mentorship.Mentor.MentorDetailResponse:
            type: object
            properties:
                displayName:
                    type: string
                    nullable: false
                    example: 'JaneDoe'
                email:
                    type: string
                    nullable: false
                    example: 'janedoe@email.com'
                    format: email
                firstName:
                    type: string
                    nullable: true
                    example: 'Jane'
                lastName:
                    type: string
                    nullable: true
                    example: 'Doe'
                profilePicture:
                    type: string
                    nullable: false
                userId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 5
                username:
                    type: string
                    nullable: false
                    example: 'JaneDoe'
                publicId:
                    type: string
                    nullable: false
                    example: 'gf242d'
                    format: string
                locales:
                    type: array
                    items:
                        type: string
                        example: 'fr'
                        enum:
                            - fr
                            - en
                            - es
                calendarIdentifier:
                    nullable: false
                    type: string
                maxStudentAccepted:
                    format: int32
                    type: integer
                    nullable: false
                    example: 5
                    minimum: 0
                    maximum: 30
                mentorshipPeriods:
                    $ref: '#/components/schemas/Mentorship.Mentor.MentorshipPeriodDetailResponse'
                reviewableProjects:
                    type: array
                    nullable: true
                    items:
                        $ref: '#/components/schemas/Mentorship.Mentor.ReviewableProjectsListItemResponse'
                reviewablePaths:
                    type: array
                    nullable: true
                    items:
                        $ref: '#/components/schemas/Mentorship.Mentor.ReviewableLearningPathsListItemResponse'
                remainingStudentPlaces:
                    format: int32
                    type: integer
                    nullable: false
                    minimum: 0
                    maximum: 30
                    example: 0
                trainingInformation:
                    type: array
                    items:
                        type: string
                        enum:
                            - vae
                            - disabled students
                        example: 'vae'
                experience:
                    type: string
                    nullable: true
                    example: 'trainee'
                role:
                    type: string
                    nullable: false
                    enum:
                        - 'mentor'
                        - 'assessor'
        Mentorship.Mentor.MentorshipPeriodDetailResponse:
            type: object
            properties:
                endedAt:
                    type: string
                    example: 2021-09-15T17:15:29+00:00
                    format: date-time
                startedAt:
                    type: string
                    example: 2020-09-15T17:15:29+00:00
                    format: date-time
                id:
                    format: int32
                    type: integer
                    example: 342
        Mentorship.Mentor.ReviewableProjectsListItemResponse:
            type: object
            properties:
                expertRole:
                    type: string
                    example: 'mentor | assessor'
                    enum:
                        - 'mentor'
                        - 'assessor'
                    nullable: false
                createdAt:
                    type: string
                    example: 2021-09-15T17:15:29+00:00
                    nullable: false
                    format: date-time
                projectId:
                    format: int32
                    nullable: false
                    type: integer
                    example: 385
                projectTitle:
                    nullable: true
                    type: string
                    example: 'Apprendre à apprendre'
        Mentorship.Mentor.ReviewableLearningPathsListItemResponse:
            type: object
            properties:
                pathId:
                    nullable: false
                    format: int32
                    type: integer
                    example: 185
                pathTitle:
                    nullable: false
                    type: string
                    example: 'Développeur Web'

        Mentorship.MentoringSession.CancelMentoringSessionRequest:
            type: object
            properties:
                cancelReasonNote:
                    type: string
                    nullable: true
                    example: 'Great progress'
                lifeCycleStatus:
                    type: string
                    nullable: false
                    enum:
                        - 'marked student as absent'
                        - 'canceled'
                currentUserId:
                    type: integer
                    format: int32
                    nullable: false
                    minimum: 1
                    maximum: 2147483647
                    example: 34235
            required:
                - lifeCycleStatus

        Mentorship.MentoringSession.MentoringSessionViewModel:
            type: object
            properties:
                expert:
                    $ref: '#/components/schemas/Session.SessionParticipantViewModel'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                recipient:
                    $ref: '#/components/schemas/Session.SessionParticipantViewModel'
                sessionDate:
                    type: string
                    nullable: false
                    example: '2020-06-18T17:00:00+0200'
                lifeCycleStatus:
                    type: string
                    nullable: false
                    enum:
                        - 'pending'
                        - 'completed'
                        - 'marked student as absent'
                        - 'canceled'
                        - 'late canceled'
                    example: 'pending'
                type:
                    type: string
                    nullable: false
                    enum:
                        - 'mentoring'
                        - 'presentation'
                    example: 'mentoring'
                videoConference:
                    $ref: '#/components/schemas/Session.SessionVideoConferenceViewModel'
                cancelReasonNote:
                    type: string
                    nullable: true
                    example: 'Had to reschedule'
                project:
                    $ref: '#/components/schemas/Session.SessionProjectViewModel'
                studentFacingNote:
                    type: string
                    nullable: true
                    example: 'Great progress'


        Session.SessionList:
            type: array
            items:
                $ref: '#/components/schemas/Session.MentorshipSessionListItemViewModel'

        Session.MentorshipSessionListItemViewModel:
            type: object
            properties:
                expert:
                    $ref: '#/components/schemas/Session.SessionParticipantViewModel'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                recipient:
                    $ref: '#/components/schemas/Session.SessionParticipantViewModel'
                sessionDate:
                    type: string
                    nullable: false
                    example: '2020-06-18T17:00:00+0200'
                lifeCycleStatus:
                    type: string
                    nullable: false
                    example: 'pending | completed | marked student as absent | canceled | late canceled'
                projectLevel:
                    type: string
                    nullable: false
                    example: '2'
                status:
                    type: string
                    nullable: false
                    deprecated: true
                    example: 'pending | completed | marked student as absent | canceled | late canceled'
                type:
                    type: string
                    nullable: false
                    example: 'mentoring | presentation'
                videoConference:
                    $ref: '#/components/schemas/Session.SessionVideoConferenceViewModel'

        Session.MentoringSessionViewModel:
            type: object
            properties:
                expert:
                    $ref: '#/components/schemas/Session.SessionParticipantViewModel'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                recipient:
                    $ref: '#/components/schemas/Session.SessionParticipantViewModel'
                sessionDate:
                    type: string
                    nullable: false
                    example: '2020-06-18T17:00:00+0200'
                lifeCycleStatus:
                    type: string
                    nullable: false
                    example: 'pending | completed | marked student as absent | canceled | late canceled'
                type:
                    type: string
                    nullable: false
                    example: 'mentoring'
                videoConference:
                    $ref: '#/components/schemas/Session.SessionVideoConferenceViewModel'
                cancelReasonNote:
                    type: string
                    nullable: true
                    example: 'Had to reschedule'
                internalNote:
                    type: string
                    nullable: true
                    example: 'Had to reschedule'
                project:
                    $ref: '#/components/schemas/Session.SessionProjectViewModel'
                studentFacingNote:
                    type: string
                    nullable: true
                    example: 'Great progress'
        Session.MentorshipSessionDetailViewModel:
            deprecated: true
            type: object
            properties:
                expert:
                    $ref: '#/components/schemas/Session.SessionParticipantViewModel'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                recipient:
                    $ref: '#/components/schemas/Session.SessionParticipantViewModel'
                sessionDate:
                    type: string
                    nullable: false
                    example: '2020-06-18T17:00:00+0200'
                lifeCycleStatus:
                    type: string
                    nullable: false
                    example: 'pending | completed | marked student as absent | canceled | late canceled'
                status:
                    type: string
                    nullable: false
                    deprecated: true
                    example: 'pending | completed | marked student as absent | canceled | late canceled'
                type:
                    type: string
                    nullable: false
                    example: 'mentoring | presentation'
                videoConference:
                    $ref: '#/components/schemas/Session.SessionVideoConferenceViewModel'
                cancelReasonNote:
                    type: string
                    nullable: false
                    example: 'Had to reschedule'
                project:
                    $ref: '#/components/schemas/Session.SessionProjectViewModel'
                studentFacingNote:
                    type: string
                    nullable: false
                    example: 'Great progress'
                projectSessionId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                mentorDisplayableName:
                    type: string
                    nullable: false
                    example: 'Jane Doe'
                    deprecated: true
                mentorId:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                    deprecated: true
                mentorProfilePicture:
                    type: string
                    nullable: false
                    example: 'https://example/default.jpg",'
                    deprecated: true
                mentorPublicId:
                    type: string
                    nullable: false
                    example: 'abcd1234'
                    deprecated: true
                mentorSlug:
                    type: string
                    nullable: false
                    example: 'JaneDoe'
                    deprecated: true
                videoConferenceId:
                    type: string
                    nullable: false
                    example: 'efgh-3554'
                    deprecated: true
        Session.SessionParticipantViewModel:
            type: object
            properties:
                displayableName:
                    type: string
                    nullable: false
                    example: 'John Smith'
                id:
                    format: int32
                    type: integer
                    nullable: false
                    example: 12345
                profilePicture:
                    type: string
                    nullable: false
                    example: 'https://example/default.jpg'
                publicId:
                    type: string
                    nullable: false
                    example: 'hghe22'
        Session.SessionVideoConferenceViewModel:
            type: object
            properties:
                id:
                    type: string
                    nullable: true
                    example: 'demo'
                recordingReason:
                    type: string
                    nullable: true
                    example: 'presentation'
                recordingStatus:
                    type: string
                    nullable: true
                    example: 'recorded'
                title:
                    type: string
                    nullable: true
                    example: 'Project Presentation'
        Session.SessionProjectViewModel:
            type: object
            properties:
                id:
                    format: int32
                    type: integer
                    nullable: true
                    example: 12345
                title:
                    type: string
                    nullable: true
                    example: 'Learn how to learn'
                projectCompletion:
                    format: float
                    type: number
                    nullable: true
                    example: '0.85'
                projectCompletionId:
                    format: int32
                    type: integer
                    nullable: true
                    example: 12345
                projectLevel:
                    type: string
                    nullable: true
                    example: '2'
        FinancialAid.Campaign.CreateFinancialAidCampaignRequest:
            type: object
            additionalProperties: false
            properties:
                name:
                    type: string
                    description: 'campaign name'
                    minLength: 1
                    maxLength: 255
                type:
                    type: string
                    description: 'campaign type'
                    enum: [ social,apprenticeship,employer,openclassrooms,individual ]
                    example: social,apprenticeship,employer,openclassrooms,individual
                started_at:
                    format: date-time
                    type: string
                    description: 'campaign start date'
            required:
                - name
                - type
                - started_at
        FinancialAid.Campaign.EditFinancialAidCampaignRequest:
            type: object
            additionalProperties: false
            properties:
                name:
                    type: string
                    description: 'campaign name'
                    minLength: 1
                    maxLength: 255
                type:
                    type: string
                    description: 'campaign type'
                    enum: [ social,apprenticeship,employer,openclassrooms,individual ]
                    example: social,apprenticeship,employer,openclassrooms,individual
                started_at:
                    format: date-time
                    type: string
                    description: 'campaign start date'
            required:
                - name
                - type
                - started_at
        FinancialAid.Campaign.FinancialAidCampaignResponse:
            type: object
            additionalProperties: false
            properties:
                id:
                    type: string
                    description: 'created object id'
                name:
                    type: string
                started_at:
                    type: string
                type:
                    type: string
        Student.LearningPath.CreateTrainingPeriodResponse:
            type: object
            additionalProperties: false
            properties:
                ulid:
                    type: string
                    description: 'created object id, to be stored in financial aid object in sales force'
        Student.LearningPath.CreateTrainingPeriodRequest:
            type: object
            additionalProperties: false
            properties:
                learningPathId:
                    type: integer
                    description: 'platformId from the related object Openclassrooms Path'
                    minimum: 1
                    maximum: 2147483647
                status:
                    type: string
                    default: 'activated'
                    enum: [ 'abandoned', 'activated' ]
                startedAt:
                    type: string
                    description: 'Traning information Start Date'
                    format: date-time
                endedAt:
                    type: string
                    description: 'Traning information End Date'
                    format: date-time
                metadata:
                    type: object
                    additionalProperties: false
                    properties:
                        sourceId:
                            type: string
                            description: 'Unique identifier allowing to identify a finaid'
                            example: 'FA-0000000027'
                        source:
                            type: string
                            description: 'from source name, in this case should always be: salesforce'
                        financialAid:
                            type: object
                            additionalProperties: false
                            properties:
                                amount:
                                    type: number
                                    description: 'Financial information Total Amount'
                                    minimum: 0
                                    maximum: 100000000
                                    exclusiveMaximum: true
                                signedDate:
                                    type: string
                                    nullable: true
                                    format: date-time
                                    description: 'Contract signing date (to be found on salesforce)'
                                customPathDuration:
                                    type: integer
                                    nullable: true
                                    default: null
                                    minimum: 0
                                    maximum: 2147483647
                                    description: 'Custom path duration in hours (to be created on salesforce)'
                                expectedPathCompletion:
                                    type: integer
                                    nullable: true
                                    default: 100
                                    description: 'number from 1 to 100 (to be created on salesforce)'
                                fileNumber:
                                    type: string
                                    nullable: true
                                    default: null
                                    description: 'an optionnal field not always filled, example from plateform: 19ENA04005061'
                                invoiceNumber:
                                    type: string
                                    nullable: true
                                    default: null
                                    description: 'an optionnal field rarely filled, example from plateform: 28 66 18 18 037'
                                submissionDate:
                                    type: string
                                    nullable: true
                                    format: date-time
                                    description: 'the submission date of the finaid (to be found on salesforce)'
                                backers:
                                    type: array
                                    minItems: 1
                                    items:
                                        type: string
                                    description: 'List of backers (to be created/used on salesforce)'
                                campaign:
                                    type: object
                                    additionalProperties: false
                                    description: 'Finaid campaign object (to be created on salesforce)'
                                    properties:
                                        name:
                                            type: string
                                        type:
                                            type: string
                                            enum: [ 'APPRENTICESHIP', 'EMPLOYER', 'OPENCLASSROOMS', 'SOCIAL', 'INDIVIDUAL' ]
                                        startedAt:
                                            type: string
                                            format: date-time
                                    required:
                                        - name
                                        - type
                                        - startedAt
                            required:
                                - amount
                                - backers
                    required:
                        - financialAid
            required:
                - metadata
                - learningPathId
                - startedAt
                - endedAt
        ApiError:
            type: object
            properties:
                code:
                    type: integer
                message:
                    type: string
        Student.LearningPath.WorkAuthorizations.Save:
            type: object
            properties:
                workInCountryOfStudy:
                    type: string
                    example: 'allowed'
                    enum: [ 'allowed', 'not allowed' ]
                    nullable: false
                workInCountryOfJobSeeking:
                    type: string
                    example: 'allowed'
                    enum: [ 'allowed', 'not allowed' ]
                    nullable: false
        Student.Cirr.Status:
            type: object
            properties:
                status:
                    type: string
                    description: '"ok", the student can access their path. "incomplete", the student must answer the second question before accessing their path. "requested", the student must answer all the questions before accessing their path.'
                    example: 'ok'
                    enum: [ 'ok', 'incomplete', 'requested' ]
                    nullable: false
            required:
                - status
        Student.LearningPath.WorkAuthorizations:
            type: object
            properties:
                id:
                    type: integer
                    nullable: false
                    example: 1234
                workInCountryOfStudy:
                    type: string
                    example: 'allowed'
                    enum: [ 'allowed', 'not allowed' ]
                    nullable: false
                workInCountryOfJobSeeking:
                    type: string
                    example: 'allowed'
                    enum: [ 'allowed', 'not allowed' ]
                    nullable: false
            required:
                - id
                - workInCountryOfStudy
                - workInCountryOfJobSeeking
        Student.LearningPath.EditTrainingPeriodRequest:
            type: object
            additionalProperties: false
            properties:
                learning_path_id:
                    type: integer
                    description: 'platformId from the related object Openclassrooms Path'
                    minimum: 1
                    maximum: 2147483647
                status:
                    type: string
                    default: 'activated'
                    enum: [ 'abandoned', 'activated' ]
                ended_at:
                    type: string
                    description: 'Traning information End Date'
                    format: date-time
                metadata:
                    type: object
                    properties:
                        financial_aid:
                            type: object
                            additionalProperties: false
                            properties:
                                custom_path_duration:
                                    type: integer
                                    nullable: true
                                    minimum: 0
                                    maximum: 2147483647
                                    default: null
                                    description: 'Custom path duration in hours (to be created on salesforce)'
                                file_number:
                                    type: string
                                    nullable: true
                                    default: null
                                    description: 'an optionnal field not always filled, example from plateform: 19ENA04005061'
                                campaign:
                                    type: object
                                    description: 'Finaid campaign object (to be created on salesforce)'
                                    properties:
                                        name:
                                            type: string
                                        type:
                                            type: string
                                            enum: [ 'APPRENTICESHIP', 'EMPLOYER', 'OPENCLASSROOMS', 'SOCIAL', 'INDIVIDUAL' ]
                                        started_at:
                                            type: string
                                            format: date-time
                                    required:
                                        - name
                                        - type
                                        - started_at
                                backers:
                                    type: array
                                    minItems: 1
                                    items:
                                        type: string
                                    description: 'List of backers (to be created/used on salesforce)'
                                amount:
                                    type: number
                                    description: 'Finaid Amount'
                                    minimum: 0
                                    maximum: 100000000
                                    exclusiveMaximum: true
                        closure:
                            type: object
                            additionalProperties: false
                            description: 'Object to be filled only when finaid is abandoned (to be created on salesforce)'
                            properties:
                                type:
                                    type: string
                                reason:
                                    type: string
                            required:
                                - type
                                - reason
        Student.LearningPath.EditTrainingPeriodResponse:
            type: object
            additionalProperties: false
        Student.LearningPath.TransferTrainingPeriodRequest:
            type: object
            additionalProperties: false
            properties:
                path_id:
                    type: integer
                    description: 'platformId from the related object Openclassrooms Path'
                    minimum: 1
                    maximum: 2147483647
                metadata:
                    type: object
                    additionalProperties: false
                    properties:
                        source_id:
                            type: string
                            description: 'Unique identifier allowing to identify a finaid'
                            example: 'FA-0000000027'
                        source:
                            type: string
                            description: 'from source name, in this case should always be: salesforce'
            required:
                - path_id

        Student.LearningPath.GoalAfterGraduation.Save:
            type: object
            properties:
                goalAfterGraduation:
                    type: string
                    example: 'new job'
                    enum:
                        - 'new job'
                        - 'stay'
                        - 'continue studies'
                        - 'for fun'
        Student.LearningPath.GoalAfterGraduation:
            type: object
            properties:
                id:
                    type: integer
                    nullable: false
                    example: 1234
                goalAfterGraduation:
                    type: string
                    example: 'new job'
                    enum:
                        - 'new job'
                        - 'stay'
                        - 'continue studies'
                        - 'for fun'
                createdAt:
                    type: string
                    nullable: false
                    example: 2020-09-15T17:15:29+00:00
                    format: date-time
                updatedAt:
                    type: string
                    nullable: true
                    example: 2020-09-15T17:15:29+00:00
                    format: date-time

    securitySchemes:
        OAuth2:
            type: oauth2
            flows:
                authorizationCode:
                    authorizationUrl: 'https://openclassrooms.lan/oauth2/authorize'
                    tokenUrl: 'https://api.openclassrooms.lan/oauth2/token'
                    scopes:
                        user_public_profile: 'Access to public profile'
                        user_email: 'Access to user email'
                        user_learning_activity: 'Access to user learning activity'
                        analytics: 'Access to analytics'
                clientCredentials:
                    tokenUrl: 'https://api.openclassrooms.lan/oauth2/token'
                    scopes:
                        learning_content: 'Only this one in this flow'
                        admin_student: 'This scope is mainly used by salesforce'
                password:
                    tokenUrl: 'https://api.openclassrooms.lan/oauth2/token'
                    refreshUrl: 'https://api.openclassrooms.lan/oauth2/token'
                    scopes:
                        learning_content: 'Access to learning content'
                        user_public_profile: 'Access to public profile'
                        user_email: 'Access to user email'
                        user_learning_activity: 'Access to user learning activity'
                        user_birth_information: 'Access to user birth informations'
                        user_calendar: 'Access to user calendar'
                        organization: 'Access to organization context'
                        openclassrooms_client: 'Access to API content'
                        current_user: 'Access only valid if the provided user is the one who is identified'
tags:
    -   name: Analytic
        description: 'All analytic related endpoints'
    -   name: Availability
        description: 'Users can specify their time slots of availability on a calendar, e.g. for mentoring or defense sessions booking'
    -   name: BirthInformation
        description: 'All birthinformation related endpoints'
    -   name: Calendar
        description: 'All calendar related endpoints'
    -   name: Certification
        description: 'All certification related endpoints'
    -   name: Chapter
        description: 'All chapter related endpoints'
    -   name: Codevolve
        description: 'All codevolve related endpoints'
    -   name: Communication
        description: 'All communication related endpoints'
    -   name: Content
        description: 'All content related endpoints'
    -   name: Course
        description: 'All course related endpoints'
    -   name: CourseCollection
        description: 'All coursecollection related endpoints'
    -   name: Evaluation
        description: 'All evaluation related endpoints'
    -   name: Event
        description: 'All event related endpoints'
    -   name: Exercise
        description: 'All exercise related endpoints'
    -   name: ExerciseParticipation
        description: 'All exerciseparticipation related endpoints'
    -   name: ExerciseSession
        description: 'All exercisesession related endpoints'
    -   name: ExerciseSkill
        description: 'All exerciseskill related endpoints'
    -   name: ExerciseWithUserInformation
        description: 'All exercisewithuserinformation related endpoints'
    -   name: ExpectedBenefits
        description: 'All expectedbenefits related endpoints'
    -   name: FinancialAid
        description: 'All financialaid related endpoints'
    -   name: FollowedCourse
        description: 'All followedcourse related endpoints'
    -   name: FundingMechanism
        description: 'All fundingmechanism related endpoints'
    -   name: Interest
        description: 'All interest related endpoints'
    -   name: Invitation
        description: 'All invitation related endpoints'
    -   name: IdentityManagement-Provisioning
        description: 'All Identity management Provisioning endpoints'
    -   name: LearningActivity
        description: 'All learningactivity related endpoints'
    -   name: LearningContent
        description: 'All learningcontent related endpoints'
    -   name: LearningPath
        description: 'All learningpath related endpoints'
    -   name: MCQ
        description: 'All mcq related endpoints'
    -   name: Mentorship
        description: 'All mentorship related endpoints'
    -   name: MentorshipSession
        description: 'All mentorshipsession related endpoints'
    -   name: OAuth2
        description: 'All oauth2 related endpoints'
    -   name: Organization
        description: 'All organization related endpoints'
    -   name: PeerAssessment
        description: 'All peerassessment related endpoints'
    -   name: PhoneNumber
        description: 'All phonenumber related endpoints'
    -   name: Policy
        description: 'All policy related endpoints'
    -   name: Presentation
        description: 'All presentation related endpoints'
    -   name: Privacy
        description: 'All privacy related endpoints'
    -   name: Product
        description: 'All product related endpoints'
    -   name: Project
        description: 'All project related endpoints'
    -   name: ProjectExternalResource
        description: 'All project external resource related endpoints'
    -   name: ProjectSession
        description: 'All project session related endpoints'
    -   name: ProjectSkill
        description: 'All project skill related endpoints'
    -   name: Reports
        description: 'All reports related endpoints'
    -   name: Security
        description: 'All security related endpoints'
    -   name: SecurityToken
        description: 'All security token related endpoints'
    -   name: SAML
        description: 'All SSO SAML related endpoints'
    -   name: Session
        description: 'All session related endpoints'
    -   name: TimeSlot
        description: 'All timeslot related endpoints'
    -   name: Toc
        description: 'All toc related endpoints'
    -   name: Skill
        description: 'All skill related endpoints'
    -   name: Skills
        description: 'All skills related endpoints'
    -   name: StudentPathDossier
        description: 'All student path dossier related endpoints'
    -   name: Support
        description: 'All support related endpoints'
    -   name: Team
        description: 'All team related endpoints'
    -   name: User
        description: 'All user related endpoints'
servers:
    -   url: 'https://api.openclassrooms.lan/'
        description: 'Development server'
