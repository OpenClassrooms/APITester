openapi: "3.0.0"
info:
    version: 1.0.0
    title: Swagger Petstore
    license:
        name: MIT
servers:
    -   url: http://petstore.swagger.io/v1
paths:
    /pets:
        get:
            summary: List all pets
            operationId: listPets
            tags:
                - pets
            parameters:
                -   name: kind
                    in: query
                    description: Filter pets by kind
                    required: false
                    schema:
                        type: string
                        enum: [ 'cat', 'dog', 'turtle' ]
                    examples:
                        cat:
                            value: cat
                            summary: expects 200.default
                        unknown:
                            value: horse
                            summary: expects default.badRequest
                -   name: limit
                    in: query
                    description: How many items to return at one time (max 100)
                    required: false
                    schema:
                        type: integer
                        format: int32
                    examples:
                        default:
                            value: 10
                            summary: expects 200.default
                        double:
                            value: 20
                            summary: expects 200.double
                        badType:
                            value: aaa
                            summary: expects default.badRequest
            responses:
                '200':
                    description: A paged array of pets
                    headers:
                        x-next:
                            description: A link to the next page of responses
                            schema:
                                type: string
                            example: /toto
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Pets"
                            examples:
                                default:
                                    value:
                                        -   id: 12
                                            name: aaa
                                        -   id: 34
                                            name: bbb
                                double:
                                    value:
                                        -   id: 12
                                            name: aaa
                                        -   id: 34
                                            name: bbb
                                        -   id: 56
                                            name: ccc
                                        -   id: 78
                                            name: ddd
                default:
                    description: unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                            examples:
                                badRequest:
                                    $ref: '#/components/examples/badRequestResponse'
                                unauthorized:
                                    $ref: '#/components/examples/unauthorizedResponse'

        post:
            summary: Create a pet
            operationId: createPets
            tags:
                - pets
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Pet'
                        examples:
                            '201':
                                $ref: '#/components/examples/petCreationBody'
                            default:
                                $ref: '#/components/examples/badPetCreationBody'
            responses:
                '201':
                    description: pet created successfuly
                    content:
                        application/json:
                            schema:
                                $ref: '#/components/schemas/Pet'
                            example:
                                $ref: '#/components/examples/petExample'
                default:
                    description: unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                            examples:
                                badRequest:
                                    $ref: '#/components/examples/badRequestResponse'
                                unauthorized:
                                    $ref: '#/components/examples/unauthorizedResponse'
    /pets/{petId}:
        get:
            summary: Info for a specific pet
            operationId: showPetById
            tags:
                - pets
            parameters:
                -   name: petId
                    in: path
                    required: true
                    description: The id of the pet to retrieve
                    schema:
                        type: string
                        example: 123 # if example has no summary => should it expect 200, 201, default ? if post => 201, otherwise => 200
            responses:
                '200':
                    description: Expected response to a valid request
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Pet"
                            example:
                                $ref: '#/components/examples/petExample'
                default:
                    description: unexpected error
                    content:
                        application/json:
                            schema:
                                $ref: "#/components/schemas/Error"
                            examples:
                                badRequest:
                                    $ref: '#/components/examples/badRequestResponse'
                                unauthorized:
                                    $ref: '#/components/examples/unauthorizedResponse'
                                notFound:
                                    $ref: '#/components/examples/notFoundResponse'
components:
    schemas:
        Pet:
            type: object
            required:
                - id
                - name
            properties:
                id:
                    type: integer
                    format: int64
                name:
                    type: string
                tag:
                    type: string
        Pets:
            type: array
            items:
                $ref: "#/components/schemas/Pet"
        Error:
            type: object
            required:
                - code
                - message
            properties:
                code:
                    type: integer
                    format: int32
                message:
                    type: string
    examples:
        # Body parameters examples

        # Body body examples
        petCreationBody:
            value:
                id: 10
                name: Jessica Smith
            summary: expects 201
        badPetCreationBody: # BodyExample 2
            value:
                id: 11
                name: 123
            summary: expects default.badRequest

        # ResponseConfig body examples
        petExample:
            value:
                id: 10
                name: Jessica Smith
        badRequestResponse:
            value:
                code: 400
                message: 'Bad request'
        unauthorizedResponse:
            value:
                code: 403
                message: 'Unauthorized'
        notFoundResponse:
            value:
                code: 404
                message: 'Resource not found'
